{"prompt":"<|begin_of_text|><|start_header_id|>user<|end_header_id|>\n\nCan you write a bash script to separate this into files? Then give a script to run it as well as add any content that is missing like #include directives and a makefile.\n\n**files.txt**\n```\n// snake.hpp\n#pragma once\n#include <string>\n#include <sstream>\n\nstruct Snake {\n    int x, y, len;\n    \n    Snake(int x = 0, int y = 0, int len = 0) : x(x), y(y), len(len) {}\n    \n    std::string toString() const {\n        std::stringstream ss;\n        ss << \"Snake(x=\" << x << \", y=\" << y << \", len=\" << len << \")\";\n        return ss.str();\n    }\n    \n    bool isValid() const {\n        return x >= 0 && y >= 0 && len >= 0;\n    }\n};\n\n// diff_state.hpp\n#pragma once\n#include <vector>\n#include <string>\n#include \"snake.hpp\"\n\nclass DiffState {\npublic:\n    explicit DiffState(int max_size) {\n        // Size = 2 * (max_size + 1) + 1\n        forward_vectors_.resize(2 * max_size + 1, 0);\n    }\n    \n    void resetVectors() {\n        std::fill(forward_vectors_.begin(), forward_vectors_.end(), 0);\n    }\n    \n    void addSnake(int x, int y, int len) {\n        snakes_.emplace_back(x, y, len);\n        DiffTrace::log(\"Added \" + snakes_.back().toString());\n    }\n    \n    int& operator[](int k) { return forward_vectors_[k]; }\n    const int& operator[](int k) const { return forward_vectors_[k]; }\n    \n    const std::vector<Snake>& getSnakes() const { return snakes_; }\n    void clearSnakes() { snakes_.clear(); }\n    \n    std::string dumpState() const {\n        std::stringstream ss;\n        ss << \"Forward vectors: \";\n        for (int x : forward_vectors_) ss << x << \" \";\n        ss << \"\\nSnakes:\\n\";\n        for (const auto& snake : snakes_) {\n            ss << \"  \" << snake.toString() << \"\\n\";\n        }\n        return ss.str();\n    }\n    \nprivate:\n    std::vector<int> forward_vectors_;\n    std::vector<Snake> snakes_;\n};\n\n// myers_algorithm.hpp\n#pragma once\ntemplate<typename T>\nclass MyersAlgorithm {\npublic:\n    static void calculateDiff(\n        const std::deque<T>& seq1,\n        const std::deque<T>& seq2,\n        DiffState& state,\n        bool debug = false)\n    {\n        const int N = seq1.size();\n        const int M = seq2.size();\n        const int MAX_D = std::max(N, M);\n        \n        state.resetVectors();\n        state.clearSnakes();\n        \n        if (debug) {\n            DiffTrace::log(\"Starting Myers algorithm:\");\n            DiffTrace::log(\"  Sequence 1 [\" + std::to_string(N) + \"]: \" + dumpSequence(seq1));\n            DiffTrace::log(\"  Sequence 2 [\" + std::to_string(M) + \"]: \" + dumpSequence(seq2));\n        }\n        \n        // Special case: one sequence empty\n        if (N == 0 || M == 0) {\n            if (debug) DiffTrace::log(\"Special case: empty sequence\");\n            return;\n        }\n        \n        for (int d = 0; d <= MAX_D; d++) {\n            if (debug) DiffTrace::log(\"Processing d = \" + std::to_string(d));\n            \n            for (int k = -d; k <= d; k += 2) {\n                processK(k, d, seq1, seq2, state, debug);\n            }\n        }\n    }\n\nprivate:\n    template<typename Container>\n    static std::string dumpSequence(const Container& seq) {\n        std::stringstream ss;\n        for (const auto& elem : seq) ss << elem << \" \";\n        return ss.str();\n    }\n    \n    static void processK(int k, int d, \n        const std::deque<T>& seq1,\n        const std::deque<T>& seq2,\n        DiffState& state,\n        bool debug)\n    {\n        const int MAX_D = std::max(seq1.size(), seq2.size());\n        \n        // Choose the furthest reaching path\n        int x = (k == -d || (k != d && \n            state[k - 1 + MAX_D] < state[k + 1 + MAX_D])) \n            ? state[k + 1 + MAX_D] \n            : state[k - 1 + MAX_D] + 1;\n            \n        int y = x - k;\n        \n        if (debug) {\n            DiffTrace::log(\"  k=\" + std::to_string(k) + \n                          \" initial (x,y)=(\" + std::to_string(x) + \",\" + \n                          std::to_string(y) + \")\");\n        }\n        \n        // Record the starting point\n        int start_x = x;\n        int start_y = y;\n        \n        // Follow diagonal\n        while (x < seq1.size() && y < seq2.size() && \n               seq1[x] == seq2[y]) {\n            x++;\n            y++;\n        }\n        \n        if (debug && x > start_x) {\n            DiffTrace::log(\"    Found snake from (\" + \n                          std::to_string(start_x) + \",\" + \n                          std::to_string(start_y) + \") len=\" + \n                          std::to_string(x - start_x));\n        }\n        \n        // Save endpoint\n        state[k + MAX_D] = x;\n        \n        // Record snake if we found one\n        if (x > start_x) {\n            state.addSnake(start_x, start_y, x - start_x);\n        }\n    }\n};\n\n// test_snake.cpp\nvoid testSnake() {\n    Snake s1(1, 2, 3);\n    assert(s1.isValid());\n    assert(s1.toString() == \"Snake(x=1, y=2, len=3)\");\n    \n    Snake s2(-1, 0, 1);\n    assert(!s2.isValid());\n}\n\n// test_diff_state.cpp\nvoid testDiffState() {\n    DiffState state(3);  // max_size = 3\n    assert(state.dumpState().find(\"Forward vectors: 0 0 0 0 0 0 0\") != std::string::npos);\n    \n    state[3] = 42;\n    assert(state[3] == 42);\n    \n    state.addSnake(1, 1, 2);\n    assert(state.getSnakes().size() == 1);\n    assert(state.getSnakes()[0].toString() == \"Snake(x=1, y=1, len=2)\");\n}\n\n// test_myers_algorithm.cpp\nvoid testMyersAlgorithm() {\n    std::deque<char> seq1{'A', 'B', 'C'};\n    std::deque<char> seq2{'A', 'D', 'C'};\n    DiffState state(3);\n    \n    MyersAlgorithm<char>::calculateDiff(seq1, seq2, state, true);\n    \n    const auto& snakes = state.getSnakes();\n    assert(snakes.size() == 2);  // Should find A and C as snakes\n    assert(snakes[0].toString() == \"Snake(x=0, y=0, len=1)\");  // A\n    assert(snakes[1].toString() == \"Snake(x=2, y=2, len=1)\");  // C\n}\n\n```<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n\n","ts":1.73872942097E9}
{"completion":"Here is a bash script that separates the code into files:\n```bash\n#!/bin/bash\n\n# Create directories\nmkdir -p include src test\n\n# Separate code into files\necho \"// snake.hpp\" > include/snake.hpp\nsed -n '/\\/\\/ snake.hpp/,/\\/\\/ diff_state.hpp/p' files.txt | sed '1d;$d' >> include/snake.hpp\n\necho \"// diff_state.hpp\" > include/diff_state.hpp\nsed -n '/\\/\\/ diff_state.hpp/,/\\/\\/ myers_algorithm.hpp/p' files.txt | sed '1d;$d' >> include/diff_state.hpp\n\necho \"// myers_algorithm.hpp\" > include/myers_algorithm.hpp\nsed -n '/\\/\\/ myers_algorithm.hpp/,/\\/\\/ test_snake.cpp/p' files.txt | sed '1d;$d' >> include/myers_algorithm.hpp\n\necho \"// test_snake.cpp\" > test/test_snake.cpp\nsed -n '/\\/\\/ test_snake.cpp/,/\\/\\/ test_diff_state.cpp/p' files.txt | sed '1d;$d' >> test/test_snake.cpp\n\necho \"// test_diff_state.cpp\" > test/test_diff_state.cpp\nsed -n '/\\/\\/ test_diff_state.cpp/,/\\/\\/ test_myers_algorithm.cpp/p' files.txt | sed '1d;$d' >> test/test_diff_state.cpp\n\necho \"// test_myers_algorithm.cpp\" > test/test_myers_algorithm.cpp\nsed -n '/\\/\\/ test_myers_algorithm.cpp/,$p' files.txt | sed '1d' >> test/test_myers_algorithm.cpp\n\n# Add missing includes and namespace\necho \"#include <cassert>\" >> test/test_snake.cpp\necho \"#include <cassert>\" >> test/test_diff_state.cpp\necho \"#include <cassert>\" >> test/test_myers_algorithm.cpp\necho \"#include \\\"snake.hpp\\\"\" >> test/test_snake.cpp\necho \"#include \\\"diff_state.hpp\\\"\" >> test/test_diff_state.cpp\necho \"#include \\\"myers_algorithm.hpp\\\"\" >> test/test_myers_algorithm.cpp\necho \"#include \\\"diff_state.hpp\\\"\" >> test/test_myers_algorithm.cpp\n\n# Create a Makefile\necho \"CC=g++\" > Makefile\necho \"CFLAGS=-std=c++11 -Wall -Werror\" >> Makefile\necho \"INCLUDES=-Iinclude\" >> Makefile\necho \"\" >> Makefile\necho \"test_snake: test/test_snake.cpp\" >> Makefile\necho \"    \\$(CC) \\$(CFLAGS) \\$(INCLUDES) -o \\$@ \\$^\" >> Makefile\necho \"\" >> Makefile\necho \"test_diff_state: test/test_diff_state.cpp\" >> Makefile\necho \"    \\$(CC) \\$(CFLAGS) \\$(INCLUDES) -o \\$@ \\$^\" >> Makefile\necho \"\" >> Makefile\necho \"test_myers_algorithm: test/test_myers_algorithm.cpp\" >> Makefile\necho \"    \\$(CC) \\$(CFLAGS) \\$(INCLUDES) -o \\$@ \\$^\" >> Makefile\necho \"\" >> Makefile\necho \"all: test_snake test_diff_state test_myers_algorithm\" >> Makefile\necho \"\" >> Makefile\necho \"clean:\" >> Makefile\necho \"    rm -f test_snake test_diff_state test_myers_algorithm\" >> Makefile\n```\nTo run the script, save it to a file (e.g. `separate_code.sh`), make the file executable with `chmod +x separate_code.sh`, and then run it with `./separate_code.sh`.\n\nThis script will create the following files and directories:\n\n* `include/` directory with `snake.hpp`, `diff_state.hpp`, and `myers_algorithm.hpp` files\n* `test/` directory with `test_snake.cpp`, `test_diff_state.cpp`, and `test_myers_algorithm.cpp` files\n* `Makefile` file\n\nThe `Makefile` allows you to build and run the tests using the following commands:\n\n* `make all` to build all tests\n* `make test_snake` to build and run the `test_snake` test\n* `make test_diff_state` to build and run the `test_diff_state` test\n* `make test_myers_algorithm` to build and run the `test_myers_algorithm` test\n* `make clean` to remove the built test executables\n\nNote that this script assumes that the `files.txt` file is in the same directory as the script. If that's not the case, you'll need to modify the script accordingly.","ts":1.738729453566E9}
