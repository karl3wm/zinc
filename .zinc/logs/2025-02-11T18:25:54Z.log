{"prompt":"<|begin_of_text|><|start_header_id|>user<|end_header_id|>\n\nPlease repeat back the filename and content of this file. I noticed the nested structure test does not validate the content, but just checks a type. Repair any problems like that.\n\n**tests/test_json.cpp**\n```\n#define BOOST_TEST_MODULE JSONTest\n#include <boost/test/unit_test.hpp>\n#include <zinc/json.hpp>\n#include <string_view>\n#include <span>\n\nusing namespace zinc;\n\nBOOST_AUTO_TEST_CASE(test_decode_encode_simple_object) {\n    const std::string_view input = R\"({\"key\":\"value\"})\";\n    JSON::Doc doc = JSON::decode(input);\n    JSON& root = *doc;\n    BOOST_CHECK_EQUAL(root.encode(), input);\n}\n\nBOOST_AUTO_TEST_CASE(test_access_object_element) {\n    const std::string_view input = R\"({\"key\":42})\";\n    JSON::Doc doc = JSON::decode(input);\n    JSON& root = *doc;\n    \n    const JSON& value = root[\"key\"];\n    BOOST_REQUIRE(std::holds_alternative<long>(value));\n    BOOST_CHECK_EQUAL(std::get<long>(value), 42);\n}\n\nBOOST_AUTO_TEST_CASE(test_null_type) {\n    JSON::Doc doc = JSON::decode(\"null\");\n    JSON& root = *doc;\n    BOOST_CHECK(std::holds_alternative<std::nullptr_t>(root));\n    BOOST_CHECK_EQUAL(root.encode(), \"null\");\n}\n\nBOOST_AUTO_TEST_CASE(test_boolean_types) {\n    {\n        JSON::Doc doc = JSON::decode(\"true\");\n        JSON& root = *doc;\n        BOOST_CHECK(std::holds_alternative<bool>(root));\n        BOOST_CHECK_EQUAL(std::get<bool>(root), true);\n    }\n    {\n        JSON::Doc doc = JSON::decode(\"false\");\n        JSON& root = *doc;\n        BOOST_CHECK(std::holds_alternative<bool>(root));\n        BOOST_CHECK_EQUAL(std::get<bool>(root), false);\n    }\n}\n\nBOOST_AUTO_TEST_CASE(test_number_types) {\n    {\n        JSON::Doc doc = JSON::decode(\"12345\");\n        JSON& root = *doc;\n        BOOST_CHECK(std::holds_alternative<long>(root));\n        BOOST_CHECK_EQUAL(std::get<long>(root), 12345);\n    }\n    {\n        JSON::Doc doc = JSON::decode(\"123.45\");\n        JSON& root = *doc;\n        BOOST_CHECK(std::holds_alternative<double>(root));\n        BOOST_CHECK_CLOSE(std::get<double>(root), 123.45, 1e-6);\n    }\n}\n\nBOOST_AUTO_TEST_CASE(test_string_type) {\n    const std::string_view input = R\"(\"hello\\u0020world\")\";\n    JSON::Doc doc = JSON::decode(input);\n    JSON& root = *doc;\n    BOOST_CHECK(std::holds_alternative<std::string_view>(root));\n    BOOST_CHECK_EQUAL(std::get<std::string_view>(root), \"hello world\");\n}\n\nBOOST_AUTO_TEST_CASE(test_array_type) {\n    const std::string_view input = R\"([1,\"two\",3.0])\";\n    JSON::Doc doc = JSON::decode(input);\n    JSON& root = *doc;\n    \n    const auto& arr = root.array();\n    BOOST_REQUIRE_EQUAL(arr.size(), 3);\n    BOOST_CHECK(std::holds_alternative<long>(arr[0]));\n    BOOST_CHECK(std::holds_alternative<std::string_view>(arr[1]));\n    BOOST_CHECK(std::holds_alternative<double>(arr[2]));\n}\n\nBOOST_AUTO_TEST_CASE(test_object_type) {\n    const std::string_view input = R\"({\"a\":1,\"b\":\"two\"})\";\n    JSON::Doc doc = JSON::decode(input);\n    JSON& root = *doc;\n    \n    const auto& obj = root.object();\n    BOOST_REQUIRE_EQUAL(obj.size(), 2);\n    BOOST_CHECK((obj[0].first == \"a\" && std::get<long>(obj[0].second) == 1) ||\n                (obj[1].first == \"a\" && std::get<long>(obj[1].second) == 1));\n}\n\nBOOST_AUTO_TEST_CASE(test_comparison_operators) {\n    JSON::Doc doc1 = JSON::decode(\"42\");\n    JSON::Doc doc2 = JSON::decode(\"42\");\n    JSON::Doc doc3 = JSON::decode(\"43\");\n    \n    BOOST_CHECK(*doc1 == *doc2);\n    BOOST_CHECK((*doc1 <=> *doc3) == std::partial_ordering::less);\n}\n\nBOOST_AUTO_TEST_CASE(test_nested_structures) {\n    const std::string_view input = R\"({\"arr\":[1,{\"nested\":true}],\"obj\":{}})\";\n    JSON::Doc doc = JSON::decode(input);\n    JSON& root = *doc;\n    \n    const JSON& arr = root[\"arr\"];\n    const auto& elements = arr.array();\n    BOOST_REQUIRE_EQUAL(elements.size(), 2);\n    BOOST_CHECK(std::holds_alternative<std::span<KeyJSONPair>>(elements[1]));\n}\n\nBOOST_AUTO_TEST_CASE(test_edge_cases) {\n    {\n        JSON::Doc doc = JSON::decode(\"[]\");\n        BOOST_CHECK_EQUAL((*doc).encode(), \"[]\");\n    }\n    {\n        JSON::Doc doc = JSON::decode(\"{}\");\n        BOOST_CHECK_EQUAL((*doc).encode(), \"{}\");\n    }\n}\n\n```<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n\n","ts":1.739316354936E9}
