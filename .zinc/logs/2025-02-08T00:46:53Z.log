{"prompt":"<|begin_of_text|><|start_header_id|>user<|end_header_id|>\n\nTalk to me about chastore_t .\n\n**third_party/xdiff/xutils.c**\n```\n/*\n *  LibXDiff by Davide Libenzi ( File Differential Library )\n *  Copyright (C) 2003\tDavide Libenzi\n *\n *  This library is free software; you can redistribute it and/or\n *  modify it under the terms of the GNU Lesser General Public\n *  License as published by the Free Software Foundation; either\n *  version 2.1 of the License, or (at your option) any later version.\n *\n *  This library is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n *  Lesser General Public License for more details.\n *\n *  You should have received a copy of the GNU Lesser General Public\n *  License along with this library; if not, see\n *  <http://www.gnu.org/licenses/>.\n *\n *  Davide Libenzi <davidel@xmailserver.org>\n *\n */\n\n#include \"xinclude.h\"\n\n\nlong xdl_bogosqrt(long n) {\n\tlong i;\n\n\t/*\n\t * Classical integer square root approximation using shifts.\n\t */\n\tfor (i = 1; n > 0; n >>= 2)\n\t\ti <<= 1;\n\n\treturn i;\n}\n\n\nint xdl_emit_diffrec(char const *rec, long size, char const *pre, long psize,\n\t\t     xdemitcb_t *ecb) {\n\tint i = 2;\n\tmmbuffer_t mb[3];\n\n\tmb[0].ptr = (char *) pre;\n\tmb[0].size = psize;\n\tmb[1].ptr = (char *) rec;\n\tmb[1].size = size;\n\tif (size > 0 && rec[size - 1] != '\\n') {\n\t\tmb[2].ptr = (char *) \"\\n\\\\ No newline at end of file\\n\";\n\t\tmb[2].size = strlen(mb[2].ptr);\n\t\ti++;\n\t}\n\tif (ecb->out_line(ecb->priv, mb, i) < 0) {\n\n\t\treturn -1;\n\t}\n\n\treturn 0;\n}\n\nvoid *xdl_mmfile_first(mmfile_t *mmf, long *size)\n{\n\t*size = mmf->size;\n\treturn mmf->ptr;\n}\n\n\nlong xdl_mmfile_size(mmfile_t *mmf)\n{\n\treturn mmf->size;\n}\n\n\nint xdl_cha_init(chastore_t *cha, long isize, long icount) {\n\n\tcha->head = cha->tail = NULL;\n\tcha->isize = isize;\n\tcha->nsize = icount * isize;\n\tcha->ancur = cha->sncur = NULL;\n\tcha->scurr = 0;\n\n\treturn 0;\n}\n\n\nvoid xdl_cha_free(chastore_t *cha) {\n\tchanode_t *cur, *tmp;\n\n\tfor (cur = cha->head; (tmp = cur) != NULL;) {\n\t\tcur = cur->next;\n\t\txdl_free(tmp);\n\t}\n}\n\n\nvoid *xdl_cha_alloc(chastore_t *cha) {\n\tchanode_t *ancur;\n\tvoid *data;\n\n\tif (!(ancur = cha->ancur) || ancur->icurr == cha->nsize) {\n\t\tif (!(ancur = (chanode_t *) xdl_malloc(sizeof(chanode_t) + cha->nsize))) {\n\n\t\t\treturn NULL;\n\t\t}\n\t\tancur->icurr = 0;\n\t\tancur->next = NULL;\n\t\tif (cha->tail)\n\t\t\tcha->tail->next = ancur;\n\t\tif (!cha->head)\n\t\t\tcha->head = ancur;\n\t\tcha->tail = ancur;\n\t\tcha->ancur = ancur;\n\t}\n\n\tdata = (char *) ancur + sizeof(chanode_t) + ancur->icurr;\n\tancur->icurr += cha->isize;\n\n\treturn data;\n}\n\nlong xdl_guess_lines(mmfile_t *mf, long sample) {\n\tlong nl = 0, size, tsize = 0;\n\tchar const *data, *cur, *top;\n\n\tif ((cur = data = xdl_mmfile_first(mf, &size))) {\n\t\tfor (top = data + size; nl < sample && cur < top; ) {\n\t\t\tnl++;\n\t\t\tif (!(cur = memchr(cur, '\\n', top - cur)))\n\t\t\t\tcur = top;\n\t\t\telse\n\t\t\t\tcur++;\n\t\t}\n\t\ttsize += (long) (cur - data);\n\t}\n\n\tif (nl && tsize)\n\t\tnl = xdl_mmfile_size(mf) / (tsize / nl);\n\n\treturn nl + 1;\n}\n\nint xdl_blankline(const char *line, long size, long flags)\n{\n\tlong i;\n\n\tif (!(flags & XDF_WHITESPACE_FLAGS))\n\t\treturn (size <= 1);\n\n\tfor (i = 0; i < size && XDL_ISSPACE(line[i]); i++)\n\t\t;\n\n\treturn (i == size);\n}\n\n/*\n * Have we eaten everything on the line, except for an optional\n * CR at the very end?\n */\nstatic int ends_with_optional_cr(const char *l, long s, long i)\n{\n\tint complete = s && l[s-1] == '\\n';\n\n\tif (complete)\n\t\ts--;\n\tif (s == i)\n\t\treturn 1;\n\t/* do not ignore CR at the end of an incomplete line */\n\tif (complete && s == i + 1 && l[i] == '\\r')\n\t\treturn 1;\n\treturn 0;\n}\n\nint xdl_recmatch(const char *l1, long s1, const char *l2, long s2, long flags)\n{\n\tint i1, i2;\n\n\tif (s1 == s2 && !memcmp(l1, l2, s1))\n\t\treturn 1;\n\tif (!(flags & XDF_WHITESPACE_FLAGS))\n\t\treturn 0;\n\n\ti1 = 0;\n\ti2 = 0;\n\n\t/*\n\t * -w matches everything that matches with -b, and -b in turn\n\t * matches everything that matches with --ignore-space-at-eol,\n\t * which in turn matches everything that matches with --ignore-cr-at-eol.\n\t *\n\t * Each flavor of ignoring needs different logic to skip whitespaces\n\t * while we have both sides to compare.\n\t */\n\tif (flags & XDF_IGNORE_WHITESPACE) {\n\t\tgoto skip_ws;\n\t\twhile (i1 < s1 && i2 < s2) {\n\t\t\tif (l1[i1++] != l2[i2++])\n\t\t\t\treturn 0;\n\t\tskip_ws:\n\t\t\twhile (i1 < s1 && XDL_ISSPACE(l1[i1]))\n\t\t\t\ti1++;\n\t\t\twhile (i2 < s2 && XDL_ISSPACE(l2[i2]))\n\t\t\t\ti2++;\n\t\t}\n\t} else if (flags & XDF_IGNORE_WHITESPACE_CHANGE) {\n\t\twhile (i1 < s1 && i2 < s2) {\n\t\t\tif (XDL_ISSPACE(l1[i1]) && XDL_ISSPACE(l2[i2])) {\n\t\t\t\t/* Skip matching spaces and try again */\n\t\t\t\twhile (i1 < s1 && XDL_ISSPACE(l1[i1]))\n\t\t\t\t\ti1++;\n\t\t\t\twhile (i2 < s2 && XDL_ISSPACE(l2[i2]))\n\t\t\t\t\ti2++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (l1[i1++] != l2[i2++])\n\t\t\t\treturn 0;\n\t\t}\n\t} else if (flags & XDF_IGNORE_WHITESPACE_AT_EOL) {\n\t\twhile (i1 < s1 && i2 < s2 && l1[i1] == l2[i2]) {\n\t\t\ti1++;\n\t\t\ti2++;\n\t\t}\n\t} else if (flags & XDF_IGNORE_CR_AT_EOL) {\n\t\t/* Find the first difference and see how the line ends */\n\t\twhile (i1 < s1 && i2 < s2 && l1[i1] == l2[i2]) {\n\t\t\ti1++;\n\t\t\ti2++;\n\t\t}\n\t\treturn (ends_with_optional_cr(l1, s1, i1) &&\n\t\t\tends_with_optional_cr(l2, s2, i2));\n\t}\n\n\t/*\n\t * After running out of one side, the remaining side must have\n\t * nothing but whitespace for the lines to match.  Note that\n\t * ignore-whitespace-at-eol case may break out of the loop\n\t * while there still are characters remaining on both lines.\n\t */\n\tif (i1 < s1) {\n\t\twhile (i1 < s1 && XDL_ISSPACE(l1[i1]))\n\t\t\ti1++;\n\t\tif (s1 != i1)\n\t\t\treturn 0;\n\t}\n\tif (i2 < s2) {\n\t\twhile (i2 < s2 && XDL_ISSPACE(l2[i2]))\n\t\t\ti2++;\n\t\treturn (s2 == i2);\n\t}\n\treturn 1;\n}\n\nstatic unsigned long xdl_hash_record_with_whitespace(char const **data,\n\t\tchar const *top, long flags) {\n\tunsigned long ha = 5381;\n\tchar const *ptr = *data;\n\tint cr_at_eol_only = (flags & XDF_WHITESPACE_FLAGS) == XDF_IGNORE_CR_AT_EOL;\n\n\tfor (; ptr < top && *ptr != '\\n'; ptr++) {\n\t\tif (cr_at_eol_only) {\n\t\t\t/* do not ignore CR at the end of an incomplete line */\n\t\t\tif (*ptr == '\\r' &&\n\t\t\t    (ptr + 1 < top && ptr[1] == '\\n'))\n\t\t\t\tcontinue;\n\t\t}\n\t\telse if (XDL_ISSPACE(*ptr)) {\n\t\t\tconst char *ptr2 = ptr;\n\t\t\tint at_eol;\n\t\t\twhile (ptr + 1 < top && XDL_ISSPACE(ptr[1])\n\t\t\t\t\t&& ptr[1] != '\\n')\n\t\t\t\tptr++;\n\t\t\tat_eol = (top <= ptr + 1 || ptr[1] == '\\n');\n\t\t\tif (flags & XDF_IGNORE_WHITESPACE)\n\t\t\t\t; /* already handled */\n\t\t\telse if (flags & XDF_IGNORE_WHITESPACE_CHANGE\n\t\t\t\t && !at_eol) {\n\t\t\t\tha += (ha << 5);\n\t\t\t\tha ^= (unsigned long) ' ';\n\t\t\t}\n\t\t\telse if (flags & XDF_IGNORE_WHITESPACE_AT_EOL\n\t\t\t\t && !at_eol) {\n\t\t\t\twhile (ptr2 != ptr + 1) {\n\t\t\t\t\tha += (ha << 5);\n\t\t\t\t\tha ^= (unsigned long) *ptr2;\n\t\t\t\t\tptr2++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcontinue;\n\t\t}\n\t\tha += (ha << 5);\n\t\tha ^= (unsigned long) *ptr;\n\t}\n\t*data = ptr < top ? ptr + 1: ptr;\n\n\treturn ha;\n}\n\nunsigned long xdl_hash_record(char const **data, char const *top, long flags) {\n\tunsigned long ha = 5381;\n\tchar const *ptr = *data;\n\n\tif (flags & XDF_WHITESPACE_FLAGS)\n\t\treturn xdl_hash_record_with_whitespace(data, top, flags);\n\n\tfor (; ptr < top && *ptr != '\\n'; ptr++) {\n\t\tha += (ha << 5);\n\t\tha ^= (unsigned long) *ptr;\n\t}\n\t*data = ptr < top ? ptr + 1: ptr;\n\n\treturn ha;\n}\n\nunsigned int xdl_hashbits(unsigned int size) {\n\tunsigned int val = 1, bits = 0;\n\n\tfor (; val < size && bits < CHAR_BIT * sizeof(unsigned int); val <<= 1, bits++);\n\treturn bits ? bits: 1;\n}\n\n\nint xdl_num_out(char *out, long val) {\n\tchar *ptr, *str = out;\n\tchar buf[32];\n\n\tptr = buf + sizeof(buf) - 1;\n\t*ptr = '\\0';\n\tif (val < 0) {\n\t\t*--ptr = '-';\n\t\tval = -val;\n\t}\n\tfor (; val && ptr > buf; val /= 10)\n\t\t*--ptr = \"0123456789\"[val % 10];\n\tif (*ptr)\n\t\tfor (; *ptr; ptr++, str++)\n\t\t\t*str = *ptr;\n\telse\n\t\t*str++ = '0';\n\t*str = '\\0';\n\n\treturn str - out;\n}\n\nstatic int xdl_format_hunk_hdr(long s1, long c1, long s2, long c2,\n\t\t\t       const char *func, long funclen,\n\t\t\t       xdemitcb_t *ecb) {\n\tint nb = 0;\n\tmmbuffer_t mb;\n\tchar buf[128];\n\n\tmemcpy(buf, \"@@ -\", 4);\n\tnb += 4;\n\n\tnb += xdl_num_out(buf + nb, c1 ? s1: s1 - 1);\n\n\tif (c1 != 1) {\n\t\tmemcpy(buf + nb, \",\", 1);\n\t\tnb += 1;\n\n\t\tnb += xdl_num_out(buf + nb, c1);\n\t}\n\n\tmemcpy(buf + nb, \" +\", 2);\n\tnb += 2;\n\n\tnb += xdl_num_out(buf + nb, c2 ? s2: s2 - 1);\n\n\tif (c2 != 1) {\n\t\tmemcpy(buf + nb, \",\", 1);\n\t\tnb += 1;\n\n\t\tnb += xdl_num_out(buf + nb, c2);\n\t}\n\n\tmemcpy(buf + nb, \" @@\", 3);\n\tnb += 3;\n\tif (func && funclen) {\n\t\tbuf[nb++] = ' ';\n\t\tif (funclen > sizeof(buf) - nb - 1)\n\t\t\tfunclen = sizeof(buf) - nb - 1;\n\t\tmemcpy(buf + nb, func, funclen);\n\t\tnb += funclen;\n\t}\n\tbuf[nb++] = '\\n';\n\n\tmb.ptr = buf;\n\tmb.size = nb;\n\tif (ecb->out_line(ecb->priv, &mb, 1) < 0)\n\t\treturn -1;\n\treturn 0;\n}\n\nint xdl_emit_hunk_hdr(long s1, long c1, long s2, long c2,\n\t\t      const char *func, long funclen,\n\t\t      xdemitcb_t *ecb) {\n\tif (!ecb->out_hunk)\n\t\treturn xdl_format_hunk_hdr(s1, c1, s2, c2, func, funclen, ecb);\n\tif (ecb->out_hunk(ecb->priv,\n\t\t\t  c1 ? s1 : s1 - 1, c1,\n\t\t\t  c2 ? s2 : s2 - 1, c2,\n\t\t\t  func, funclen) < 0)\n\t\treturn -1;\n\treturn 0;\n}\n\nint xdl_fall_back_diff(xdfenv_t *diff_env, xpparam_t const *xpp,\n\t\tint line1, int count1, int line2, int count2)\n{\n\t/*\n\t * This probably does not work outside Git, since\n\t * we have a very simple mmfile structure.\n\t *\n\t * Note: ideally, we would reuse the prepared environment, but\n\t * the libxdiff interface does not (yet) allow for diffing only\n\t * ranges of lines instead of the whole files.\n\t */\n\tmmfile_t subfile1, subfile2;\n\txdfenv_t env;\n\n\tsubfile1.ptr = (char *)diff_env->xdf1.recs[line1 - 1]->ptr;\n\tsubfile1.size = diff_env->xdf1.recs[line1 + count1 - 2]->ptr +\n\t\tdiff_env->xdf1.recs[line1 + count1 - 2]->size - subfile1.ptr;\n\tsubfile2.ptr = (char *)diff_env->xdf2.recs[line2 - 1]->ptr;\n\tsubfile2.size = diff_env->xdf2.recs[line2 + count2 - 2]->ptr +\n\t\tdiff_env->xdf2.recs[line2 + count2 - 2]->size - subfile2.ptr;\n\tif (xdl_do_diff(&subfile1, &subfile2, xpp, &env) < 0)\n\t\treturn -1;\n\n\tmemcpy(diff_env->xdf1.rchg + line1 - 1, env.xdf1.rchg, count1);\n\tmemcpy(diff_env->xdf2.rchg + line2 - 1, env.xdf2.rchg, count2);\n\n\txdl_free_env(&env);\n\n\treturn 0;\n}\n\nvoid* xdl_alloc_grow_helper(void *p, long nr, long *alloc, size_t size)\n{\n\tvoid *tmp = NULL;\n\tsize_t n = ((LONG_MAX - 16) / 2 >= *alloc) ? 2 * *alloc + 16 : LONG_MAX;\n\tif (nr > n)\n\t\tn = nr;\n\tif (SIZE_MAX / size >= n)\n\t\ttmp = xdl_realloc(p, n * size);\n\tif (tmp) {\n\t\t*alloc = n;\n\t} else {\n\t\txdl_free(p);\n\t\t*alloc = 0;\n\t}\n\treturn tmp;\n}\n\n```\n\n**third_party/xdiff/xutils.h**\n```\n/*\n *  LibXDiff by Davide Libenzi ( File Differential Library )\n *  Copyright (C) 2003  Davide Libenzi\n *\n *  This library is free software; you can redistribute it and/or\n *  modify it under the terms of the GNU Lesser General Public\n *  License as published by the Free Software Foundation; either\n *  version 2.1 of the License, or (at your option) any later version.\n *\n *  This library is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n *  Lesser General Public License for more details.\n *\n *  You should have received a copy of the GNU Lesser General Public\n *  License along with this library; if not, see\n *  <http://www.gnu.org/licenses/>.\n *\n *  Davide Libenzi <davidel@xmailserver.org>\n *\n */\n\n#if !defined(XUTILS_H)\n#define XUTILS_H\n\n\n\nlong xdl_bogosqrt(long n);\nint xdl_emit_diffrec(char const *rec, long size, char const *pre, long psize,\n\t\t     xdemitcb_t *ecb);\nint xdl_cha_init(chastore_t *cha, long isize, long icount);\nvoid xdl_cha_free(chastore_t *cha);\nvoid *xdl_cha_alloc(chastore_t *cha);\nlong xdl_guess_lines(mmfile_t *mf, long sample);\nint xdl_blankline(const char *line, long size, long flags);\nint xdl_recmatch(const char *l1, long s1, const char *l2, long s2, long flags);\nunsigned long xdl_hash_record(char const **data, char const *top, long flags);\nunsigned int xdl_hashbits(unsigned int size);\nint xdl_num_out(char *out, long val);\nint xdl_emit_hunk_hdr(long s1, long c1, long s2, long c2,\n\t\t      const char *func, long funclen, xdemitcb_t *ecb);\nint xdl_fall_back_diff(xdfenv_t *diff_env, xpparam_t const *xpp,\n\t\t       int line1, int count1, int line2, int count2);\n\n/* Do not call this function, use XDL_ALLOC_GROW instead */\nvoid* xdl_alloc_grow_helper(void* p, long nr, long* alloc, size_t size);\n\n#endif /* #if !defined(XUTILS_H) */\n\n```\n\n**third_party/xdiff/xmacros.h**\n```\n/*\n *  LibXDiff by Davide Libenzi ( File Differential Library )\n *  Copyright (C) 2003  Davide Libenzi\n *\n *  This library is free software; you can redistribute it and/or\n *  modify it under the terms of the GNU Lesser General Public\n *  License as published by the Free Software Foundation; either\n *  version 2.1 of the License, or (at your option) any later version.\n *\n *  This library is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n *  Lesser General Public License for more details.\n *\n *  You should have received a copy of the GNU Lesser General Public\n *  License along with this library; if not, see\n *  <http://www.gnu.org/licenses/>.\n *\n *  Davide Libenzi <davidel@xmailserver.org>\n *\n */\n\n#if !defined(XMACROS_H)\n#define XMACROS_H\n\n\n\n\n#define XDL_MIN(a, b) ((a) < (b) ? (a): (b))\n#define XDL_MAX(a, b) ((a) > (b) ? (a): (b))\n#define XDL_ABS(v) ((v) >= 0 ? (v): -(v))\n#define XDL_ISDIGIT(c) ((c) >= '0' && (c) <= '9')\n#define XDL_ISSPACE(c) (isspace((unsigned char)(c)))\n#define XDL_ADDBITS(v,b)\t((v) + ((v) >> (b)))\n#define XDL_MASKBITS(b)\t\t((1UL << (b)) - 1)\n#define XDL_HASHLONG(v,b)\t(XDL_ADDBITS((unsigned long)(v), b) & XDL_MASKBITS(b))\n#define XDL_LE32_PUT(p, v) \\\ndo { \\\n\tunsigned char *__p = (unsigned char *) (p); \\\n\t*__p++ = (unsigned char) (v); \\\n\t*__p++ = (unsigned char) ((v) >> 8); \\\n\t*__p++ = (unsigned char) ((v) >> 16); \\\n\t*__p = (unsigned char) ((v) >> 24); \\\n} while (0)\n#define XDL_LE32_GET(p, v) \\\ndo { \\\n\tunsigned char const *__p = (unsigned char const *) (p); \\\n\t(v) = (unsigned long) __p[0] | ((unsigned long) __p[1]) << 8 | \\\n\t\t((unsigned long) __p[2]) << 16 | ((unsigned long) __p[3]) << 24; \\\n} while (0)\n\n/* Allocate an array of nr elements, returns NULL on failure */\n#define XDL_ALLOC_ARRAY(p, nr)\t\t\t\t\\\n\t((p) = SIZE_MAX / sizeof(*(p)) >= (size_t)(nr)\t\\\n\t\t? xdl_malloc((nr) * sizeof(*(p)))\t\\\n\t\t: NULL)\n\n/* Allocate an array of nr zeroed out elements, returns NULL on failure */\n#define XDL_CALLOC_ARRAY(p, nr)\t((p) = xdl_calloc(nr, sizeof(*(p))))\n\n/*\n * Ensure array p can accommodate at least nr elements, growing the\n * array and updating alloc (which is the number of allocated\n * elements) as necessary. Frees p and returns -1 on failure, returns\n * 0 on success\n */\n#define XDL_ALLOC_GROW(p, nr, alloc)\t\\\n\t(-!((nr) <= (alloc) ||\t\t\\\n\t    ((p) = xdl_alloc_grow_helper((p), (nr), &(alloc), sizeof(*(p))))))\n\n#endif /* #if !defined(XMACROS_H) */\n\n```\n\n**third_party/xdiff/xdiff.h**\n```\n/*\n *  LibXDiff by Davide Libenzi ( File Differential Library )\n *  Copyright (C) 2003  Davide Libenzi\n *\n *  This library is free software; you can redistribute it and/or\n *  modify it under the terms of the GNU Lesser General Public\n *  License as published by the Free Software Foundation; either\n *  version 2.1 of the License, or (at your option) any later version.\n *\n *  This library is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n *  Lesser General Public License for more details.\n *\n *  You should have received a copy of the GNU Lesser General Public\n *  License along with this library; if not, see\n *  <http://www.gnu.org/licenses/>.\n *\n *  Davide Libenzi <davidel@xmailserver.org>\n *\n */\n\n#if !defined(XDIFF_H)\n#define XDIFF_H\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif /* #ifdef __cplusplus */\n\n#include \"git-xdiff.h\"\n\n/* xpparm_t.flags */\n#define XDF_NEED_MINIMAL (1 << 0)\n\n#define XDF_IGNORE_WHITESPACE (1 << 1)\n#define XDF_IGNORE_WHITESPACE_CHANGE (1 << 2)\n#define XDF_IGNORE_WHITESPACE_AT_EOL (1 << 3)\n#define XDF_IGNORE_CR_AT_EOL (1 << 4)\n#define XDF_WHITESPACE_FLAGS (XDF_IGNORE_WHITESPACE | \\\n\t\t\t      XDF_IGNORE_WHITESPACE_CHANGE | \\\n\t\t\t      XDF_IGNORE_WHITESPACE_AT_EOL | \\\n\t\t\t      XDF_IGNORE_CR_AT_EOL)\n\n#define XDF_IGNORE_BLANK_LINES (1 << 7)\n\n#define XDF_PATIENCE_DIFF (1 << 14)\n#define XDF_HISTOGRAM_DIFF (1 << 15)\n#define XDF_DIFF_ALGORITHM_MASK (XDF_PATIENCE_DIFF | XDF_HISTOGRAM_DIFF)\n#define XDF_DIFF_ALG(x) ((x) & XDF_DIFF_ALGORITHM_MASK)\n\n#define XDF_INDENT_HEURISTIC (1 << 23)\n\n/* xdemitconf_t.flags */\n#define XDL_EMIT_FUNCNAMES (1 << 0)\n#define XDL_EMIT_NO_HUNK_HDR (1 << 1)\n#define XDL_EMIT_FUNCCONTEXT (1 << 2)\n\n/* merge simplification levels */\n#define XDL_MERGE_MINIMAL 0\n#define XDL_MERGE_EAGER 1\n#define XDL_MERGE_ZEALOUS 2\n#define XDL_MERGE_ZEALOUS_ALNUM 3\n\n/* merge favor modes */\n#define XDL_MERGE_FAVOR_OURS 1\n#define XDL_MERGE_FAVOR_THEIRS 2\n#define XDL_MERGE_FAVOR_UNION 3\n\n/* merge output styles */\n#define XDL_MERGE_DIFF3 1\n#define XDL_MERGE_ZEALOUS_DIFF3 2\n\ntypedef struct s_mmfile {\n\tchar *ptr;\n\tlong size;\n} mmfile_t;\n\ntypedef struct s_mmbuffer {\n\tchar *ptr;\n\tlong size;\n} mmbuffer_t;\n\ntypedef struct s_xpparam {\n\tunsigned long flags;\n\n\t/* -I<regex> */\n\txdl_regex_t **ignore_regex;\n\tsize_t ignore_regex_nr;\n\n\t/* See Documentation/diff-options.txt. */\n\tchar **anchors;\n\tsize_t anchors_nr;\n} xpparam_t;\n\ntypedef struct s_xdemitcb {\n\tvoid *priv;\n\tint (*out_hunk)(void *,\n\t\t\tlong old_begin, long old_nr,\n\t\t\tlong new_begin, long new_nr,\n\t\t\tconst char *func, long funclen);\n\tint (*out_line)(void *, mmbuffer_t *, int);\n} xdemitcb_t;\n\ntypedef long (*find_func_t)(const char *line, long line_len, char *buffer, long buffer_size, void *priv);\n\ntypedef int (*xdl_emit_hunk_consume_func_t)(long start_a, long count_a,\n\t\t\t\t\t    long start_b, long count_b,\n\t\t\t\t\t    void *cb_data);\n\ntypedef struct s_xdemitconf {\n\tlong ctxlen;\n\tlong interhunkctxlen;\n\tunsigned long flags;\n\tfind_func_t find_func;\n\tvoid *find_func_priv;\n\txdl_emit_hunk_consume_func_t hunk_func;\n} xdemitconf_t;\n\ntypedef struct s_bdiffparam {\n\tlong bsize;\n} bdiffparam_t;\n\n\nvoid *xdl_mmfile_first(mmfile_t *mmf, long *size);\nlong xdl_mmfile_size(mmfile_t *mmf);\n\nint xdl_diff(mmfile_t *mf1, mmfile_t *mf2, xpparam_t const *xpp,\n\t     xdemitconf_t const *xecfg, xdemitcb_t *ecb);\n\ntypedef struct s_xmparam {\n\txpparam_t xpp;\n\tint marker_size;\n\tint level;\n\tint favor;\n\tint style;\n\tconst char *ancestor;\t/* label for orig */\n\tconst char *file1;\t/* label for mf1 */\n\tconst char *file2;\t/* label for mf2 */\n} xmparam_t;\n\n#define DEFAULT_CONFLICT_MARKER_SIZE 7\n\nint xdl_merge(mmfile_t *orig, mmfile_t *mf1, mmfile_t *mf2,\n\t\txmparam_t const *xmp, mmbuffer_t *result);\n\n#ifdef __cplusplus\n}\n#endif /* #ifdef __cplusplus */\n\n#endif /* #if !defined(XDIFF_H) */\n\n```\n\n**third_party/xdiff/xdiffi.h**\n```\n/*\n *  LibXDiff by Davide Libenzi ( File Differential Library )\n *  Copyright (C) 2003  Davide Libenzi\n *\n *  This library is free software; you can redistribute it and/or\n *  modify it under the terms of the GNU Lesser General Public\n *  License as published by the Free Software Foundation; either\n *  version 2.1 of the License, or (at your option) any later version.\n *\n *  This library is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n *  Lesser General Public License for more details.\n *\n *  You should have received a copy of the GNU Lesser General Public\n *  License along with this library; if not, see\n *  <http://www.gnu.org/licenses/>.\n *\n *  Davide Libenzi <davidel@xmailserver.org>\n *\n */\n\n#if !defined(XDIFFI_H)\n#define XDIFFI_H\n\n\ntypedef struct s_diffdata {\n\tlong nrec;\n\tunsigned long const *ha;\n\tlong *rindex;\n\tchar *rchg;\n} diffdata_t;\n\ntypedef struct s_xdalgoenv {\n\tlong mxcost;\n\tlong snake_cnt;\n\tlong heur_min;\n} xdalgoenv_t;\n\ntypedef struct s_xdchange {\n\tstruct s_xdchange *next;\n\tlong i1, i2;\n\tlong chg1, chg2;\n\tint ignore;\n} xdchange_t;\n\n\n\nint xdl_recs_cmp(diffdata_t *dd1, long off1, long lim1,\n\t\t diffdata_t *dd2, long off2, long lim2,\n\t\t long *kvdf, long *kvdb, int need_min, xdalgoenv_t *xenv);\nint xdl_do_diff(mmfile_t *mf1, mmfile_t *mf2, xpparam_t const *xpp,\n\t\txdfenv_t *xe);\nint xdl_change_compact(xdfile_t *xdf, xdfile_t *xdfo, long flags);\nint xdl_build_script(xdfenv_t *xe, xdchange_t **xscr);\nvoid xdl_free_script(xdchange_t *xscr);\nint xdl_emit_diff(xdfenv_t *xe, xdchange_t *xscr, xdemitcb_t *ecb,\n\t\t  xdemitconf_t const *xecfg);\nint xdl_do_patience_diff(xpparam_t const *xpp, xdfenv_t *env);\nint xdl_do_histogram_diff(xpparam_t const *xpp, xdfenv_t *env);\n\n#endif /* #if !defined(XDIFFI_H) */\n\n```","ts":1.738975613176E9}
{"completion":"","ts":1.738975638632E9}
