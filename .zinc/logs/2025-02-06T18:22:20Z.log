{"prompt":"<|begin_of_text|><|start_header_id|>user<|end_header_id|>\n\nI'm interested in building a C++ wrapper for xdiff, which used to be libxdiff but is now maintained inside the git project. Documentation still exists for the old libxdiff but it has changed a little inside git. Create a project document and task lisk for xdiffpp.\n\n**ref/libxdiff/man/xdiff.txt**\n```\nLibXDiff(3)                File Differential Library               LibXDiff(3)\n\n\n\nNAME\n       xdl_set_allocator, xdl_malloc, xdl_free, xdl_realloc, xdl_init_mmfile,\n       xdl_free_mmfile, xdl_mmfile_iscompact, xdl_seek_mmfile,\n       xdl_read_mmfile, xdl_write_mmfile, xdl_writem_mmfile,\n       xdl_mmfile_writeallocate, xdl_mmfile_ptradd, xdl_mmfile_first,\n       xdl_mmfile_next, xdl_mmfile_size, xdl_mmfile_cmp, xdl_mmfile_compact,\n       xdl_diff, xdl_patch, xdl_merge3, xdl_bdiff_mb, xdl_bdiff, xdl_rabd-\n       iff_mb, xdl_rabdiff, xdl_bdiff_tgsize, xdl_bpatch - File Differential\n       Library support functions\n\n\nSYNOPSIS\n       #include <xdiff.h>\n\n       int xdl_set_allocator(memallocator_t const *malt);\n       void *xdl_malloc(unsigned int size);\n       void xdl_free(void *ptr);\n       void *xdl_realloc(void *ptr, unsigned int nsize);\n       int xdl_init_mmfile(mmfile_t *mmf, long bsize, unsigned long flags);\n       void xdl_free_mmfile(mmfile_t *mmf);\n       int xdl_mmfile_iscompact(mmfile_t *mmf);\n       int xdl_seek_mmfile(mmfile_t *mmf, long off);\n       long xdl_read_mmfile(mmfile_t *mmf, void *data, long size);\n       long xdl_write_mmfile(mmfile_t *mmf, void const *data, long size);\n       long xdl_writem_mmfile(mmfile_t *mmf, mmbuffer_t *mb, int nbuf);\n       void *xdl_mmfile_writeallocate(mmfile_t *mmf, long size);\n       long xdl_mmfile_ptradd(mmfile_t *mmf, char *ptr, long size, unsigned long flags);\n       void *xdl_mmfile_first(mmfile_t *mmf, long *size);\n       void *xdl_mmfile_next(mmfile_t *mmf, long *size);\n       long xdl_mmfile_size(mmfile_t *mmf);\n       int xdl_mmfile_cmp(mmfile_t *mmf1, mmfile_t *mmf2);\n       int xdl_mmfile_compact(mmfile_t *mmfo, mmfile_t *mmfc, long bsize, unsigned long flags);\n       int xdl_diff(mmfile_t *mmf1, mmfile_t *mmf2, xpparam_t const *xpp, xdemitconf_t const *xecfg, xdemitcb_t *ecb);\n       int xdl_patch(mmfile_t *mmf, mmfile_t *mmfp, int mode, xdemitcb_t *ecb, xdemitcb_t *rjecb);\n       int xdl_merge3(mmfile_t *mmfo, mmfile_t *mmf1, mmfile_t *mmf2, xdemitcb_t *ecb, xdemitcb_t *rjecb);\n       int xdl_bdiff_mb(mmbuffer_t *mmb1, mmbuffer_t *mmb2, bdiffparam_t const *bdp, xdemitcb_t *ecb);\n       int xdl_bdiff(mmfile_t *mmf1, mmfile_t *mmf2, bdiffparam_t const *bdp, xdemitcb_t *ecb);\n       int xdl_rabdiff_mb(mmbuffer_t *mmb1, mmbuffer_t *mmb2, xdemitcb_t *ecb);\n       int xdl_rabdiff(mmfile_t *mmf1, mmfile_t *mmf2, xdemitcb_t *ecb);\n       long xdl_bdiff_tgsize(mmfile_t *mmfp);\n       int xdl_bpatch(mmfile_t *mmf, mmfile_t *mmfp, xdemitcb_t *ecb);\n\n\nDESCRIPTION\n       The LibXDiff library implements basic and yet complete functionalities\n       to create file differences/patches to both binary and text files. The\n       library uses memory files as file abstraction to achieve both perfor-\n       mance and portability. For binary files, LibXDiff implements both (with\n       some modification) the algorithm described in File System Support for\n       Delta Compression by Joshua P. MacDonald, and the method described in\n       Fingerprinting by Random Polynomials by Michael O. Rabin.  While for\n       text files it follows directives described in An O(ND) Difference Algo-\n       rithm and Its Variations by Eugene W. Myers.  Memory files used by the\n       library are basically a collection of buffers that store the file con-\n       tent. There are two different requirements for memory files when passed\n       to diff/patch functions. Text files for diff/patch functions require\n       that a single line do not have to spawn across two different memory\n       file blocks. Binary diff/patch functions require memory files to be\n       compact.  A compact memory files is a file whose content is stored\n       inside a single block.  Functionalities inside the library are avail-\n       able to satisfy these rules.  Using the XDL_MMF_ATOMIC memory file flag\n       it is possible to make writes to not split the written record across\n       different blocks, while the functions xdl_mmfile_iscompact() ,\n       xdl_mmfile_compact() and xdl_mmfile_writeallocate() are usefull to test\n       if the file is compact and to create a compacted version of the file\n       itself. The text file differential output uses the raw unified output\n       format, by omitting the file header since the result is always relative\n       to a single compare operation (between two files). The output format of\n       the binary patch file is proprietary (and binary) and it is basically a\n       collection of copy and insert commands, like described inside the Mac-\n       Donald paper.\n\n\n\n   Functions\n       The following functions are defined:\n\n       int xdl_set_allocator(memallocator_t const *malt);\n\n              The LibXDiff library enable the user to set its own memory allo-\n              cator, that will be used for all the following memory requests.\n              The allocator must be set before to start calling the LibXDiff\n              library with a call to xdl_set_allocator().  The memory alloca-\n              tor structure contains the following members:\n\n                   typedef struct s_memallocator {\n                        void *priv;\n                        void *(*malloc)(void *priv, unsigned int size);\n                        void (*free)(void *priv, void *ptr);\n                        void *(*realloc)(void *priv, void *ptr, unsigned int nsize);\n                   } memallocator_t;\n\n              The malloc() function pointer will be used by LibXDiff to\n              request a memory block of size bytes. The free() function\n              pointer will be called to free a previously allocated block ptr\n              , while the realloc() will be used to resize the ptr to a new\n              nsize size in bytes. The priv structure member will be passed to\n              the malloc(),free(),realloc() functions as first parameter. The\n              LibXDiff user must call xdl_set_allocator() before starting\n              using the library, otherwise LibXDiff functions will fail due to\n              the lack of memory allocation support.  A typical initialization\n              sequence for POSIX systems will use the standard malloc(3),\n              free(3), realloc(3) and will look like:\n\n                   void *wrap_malloc(void *priv, unsigned int size) {\n                        return malloc(size);\n                   }\n\n                   void wrap_free(void *priv, void *ptr) {\n                        free(ptr);\n                   }\n\n                   void *wrap_realloc(void *priv, void *ptr, unsigned int size) {\n                        return realloc(ptr, size);\n                   }\n\n                   void my_init_xdiff(void) {\n                        memallocator_t malt;\n\n                        malt.priv = NULL;\n                        malt.malloc = wrap_malloc;\n                        malt.free = wrap_free;\n                        malt.realloc = wrap_realloc;\n                        xdl_set_allocator(&malt);\n                   }\n\n\n\n       void *xdl_malloc(unsigned int size);\n\n              Allocates a memory block of size bytes using the LibXDiff memory\n              allocator. The user can specify its own allocator using the\n              xdl_set_allocator() function. The xdl_malloc() return a pointer\n              to the newly allocated block, or NULL in case of failure.\n\n\n       void xdl_free(void *ptr);\n\n              Free a previously allocated memory block pointed by ptr.  The\n              ptr block must has been allocated using either xdl_malloc() or\n              xdl_realloc().\n\n\n       void *xdl_realloc(void *ptr, unsigned int nsize);\n\n              Resizes the memory block pointed by ptr to a new size nsize.\n              Return the resized block if successful, or NULL in case the\n              reallocation fails. After a successful reallocation, the old ptr\n              block is to be considered no more valid.\n\n\n       int xdl_init_mmfile(mmfile_t *mmf, long bsize, unsigned long flags);\n\n              Initialize the memory file mmf by requiring an internal block\n              size of bsize.  The flags parameter is a combination of the fol-\n              lowing flags :\n\n              XDL_MMF_ATOMIC Writes on the memory file will be atomic. That\n              is, the data will not be split on two or more different blocks.\n\n              Once an xdl_init_mmfile() succeeded, a matching\n              xdl_free_mmfile() must be called when the user has done using\n              the memory file, otherwise serious memory leaks will happen.\n              The function return 0 if succeed or -1 if an error is encoun-\n              tered.\n\n\n       void xdl_free_mmfile(mmfile_t *mmf);\n\n              Free all the data associated with the mmf memory file.\n\n\n       int xdl_mmfile_iscompact(mmfile_t *mmf);\n\n              Returns an integer different from 0 if the mmf memory file is\n              compact, 0 otherwise. A compact memory file is one that have the\n              whole content stored inside a single block.\n\n\n       int xdl_seek_mmfile(mmfile_t *mmf, long off);\n\n              Set the current data pointer of the memory file mmf to the spec-\n              ified offset off from the beginning of the file itself. Returns\n              0 if successful or -1 if an error happened.\n\n\n       long xdl_read_mmfile(mmfile_t *mmf, void *data, long size);\n\n              Request to read size bytes from the memory file mmf by storing\n              the data inside the data buffer. Returns the number of bytes\n              read into the data buffer. The amount of data read can be lower\n              than the specified size.  The function returns -1 if an error\n              happened.\n\n\n       long xdl_write_mmfile(mmfile_t *mmf, void const *data, long size);\n\n              Request to write size bytes from the specified buffer data into\n              the memory file mmf.  If the memory file has been created using\n              the XDL_MMF_ATOMIC flag, the write request will not be split\n              across different blocks.  Note that all write operations done on\n              memory files do append data at the end the file, and writes in\n              the middle of it are allowed. This is because the library memory\n              file abstraction does not need this functionality to be avail-\n              able.  The function returns the number of bytes written or a\n              number lower than size if an error happened.\n\n\n       long xdl_writem_mmfile(mmfile_t *mmf, mmbuffer_t *mb, int nbuf);\n\n              Request to sequentially write nbuf memory buffers passed inside\n              the array mb into the memory file mmf.  The memory buffer struc-\n              ture is defined as :\n\n                   typedef struct s_mmbuffer {\n                        char *ptr;\n                        long size;\n                   } mmbuffer_t;\n\n              The ptr field is a pointer to the user data, whose size is spec-\n              ified inside the size structure field. The function returns the\n              total number of bytes written or a lower number if an error hap-\n              pened.\n\n\n       void *xdl_mmfile_writeallocate(mmfile_t *mmf, long size);\n\n              The function request to allocate a write buffer of size bytes in\n              the mmf memory file and returns the pointer to the allocated\n              buffer. The user will have the responsibility to store size\n              bytes (no more, no less) inside the memory region pointed to by\n              the returned pointer.  The files size will grow of size bytes as\n              a consequence of this operation. The function will return NULL\n              if an error happened.\n\n\n       long xdl_mmfile_ptradd(mmfile_t *mmf, char *ptr, long size, unsigned\n       long flags);\n\n              The function adds a user specified block to the end of the mem-\n              ory file mmf.  The block first byte is pointed to by ptr and its\n              length is size bytes. The flags parameter can be used to specify\n              attributes of the user memory block. Currently supported\n              attributes are:\n\n              XDL_MMB_READONLY Specify that the added memory block must be\n              treated as read-only, and every attempt to write on it should\n              result in a failure of the memory file writing functions.\n\n              The purpose of this function is basically to avoid copying mem-\n              ory around, by helping the library to not drain the CPU cache.\n              The function returns size in case of success, or -1 in case of\n              error.\n\n\n       void *xdl_mmfile_first(mmfile_t *mmf, long *size);\n\n              The function is used to return the first block of the mmf memory\n              file block chain. The size parameter will receive the size of\n              the block, while the function will return the pointer the the\n              first byte of the block itself. The function returns NULL if the\n              file is empty.\n\n\n       void *xdl_mmfile_next(mmfile_t *mmf, long *size);\n\n              The function is used to return the next block of the mmf memory\n              file block chain. The size parameter will receive the size of\n              the block, while the function will return the pointer the the\n              first byte of the block itself. The function returns NULL if the\n              current block is the last one of the chain.\n\n\n       long xdl_mmfile_size(mmfile_t *mmf);\n\n              The function returns the size of the specified memory file mmf.\n\n\n       int xdl_mmfile_cmp(mmfile_t *mmf1, mmfile_t *mmf2);\n\n              Request to compare two memory files mmf1 and mmf2 and returns 0\n              if files are identical, or a value different from 0 if files are\n              different.\n\n\n       int xdl_mmfile_compact(mmfile_t *mmfo, mmfile_t *mmfc, long bsize,\n       unsigned long flags);\n\n              Request to create a compact version of the memory file mmfo into\n              the (uninitialized) memory file mmfc.  The bsize parameter spec-\n              ify the requested block size and flags specify flags to be used\n              to create the new mmfc memory file (see xdl_init_mmfile() ). The\n              function returns 0 if succedded or -1 if an error happened.\n\n\n       int xdl_diff(mmfile_t *mmf1, mmfile_t *mmf2, xpparam_t const *xpp,\n       xdemitconf_t const *xecfg, xdemitcb_t *ecb);\n\n              Request to create the difference between the two text memory\n              files mmf1 and mmf2.  The mmf1 memory files is considered the\n              \"old\" file while mmf2 is considered the \"new\" file. So the func-\n              tion will create a patch file that once applied to mmf1 will\n              give mmf2 as result. Files mmf1 and mmf2 must be atomic from a\n              line point of view (or, as an extreme, compact), that means that\n              a single test line cannot spread among different memory file\n              blocks.  The xpp parameter is a pointer to a structure :\n\n                   typedef struct s_xpparam {\n                        unsigned long flags;\n                   } xpparam_t;\n\n              that is used to specify parameters to be used by the file dif-\n              ferential algorithm.  The flags field is a combination of the\n              following flags :\n\n\n              XDF_NEED_MINIMAL Requires the minimal edit script to be found by\n              the algorithm (may be slow).\n\n              The xecfg parameter point to a structure :\n\n                   typedef struct s_xdemitconf {\n                        long ctxlen;\n                   } xdemitconf_t;\n\n              that is used to configure the algorithm responsible of the\n              creation the the differential file from an edit script. The\n              ctxlen field is used to specify the amount of context to be\n              emitted inside the differential file (the value 3 is suggested\n              for normal operations).  The parameter ecb is a pointer to a\n              structure :\n\n                   typedef struct s_xdemitcb {\n                        void *priv;\n                        int (*outf)(void *, mmbuffer_t *, int);\n                   } xdemitcb_t;\n\n              that is used by the differential file creation algorithm to emit\n              the created data. The priv field is an opaque pointer to a user\n              specified data, while the outf field point to a callback func-\n              tion that is called internally to emit algorithm generated data\n              rappresenting the differential file. The first parameter of the\n              callback is the same priv field specified inside the xdemitcb_t\n              structure. The second parameter point to an array of mmbuffer_t\n              (see above for a definition of the structure) whose element\n              count is specified inside the last parameter of the callback\n              itself. The callback will always be called with entire records\n              (lines) and never a record (line) will be emitted using two dif-\n              ferent callback calls. This is important because if the called\n              will use another memory file to store the result, by creating\n              the target memory file with XDL_MMF_ATOMIC will guarantee the\n              \"atomicity\" of the memory file itself.  The function returns 0\n              if succeeded or -1 if an error occurred.\n\n\n       int xdl_patch(mmfile_t *mmf, mmfile_t *mmfp, int mode, xdemitcb_t *ecb,\n       xdemitcb_t *rjecb);\n\n              Request to patch the memory file mmf using the patch file stored\n              in mmfp.  The mmf memory file is not changed during the opera-\n              tion and can be considered as read only.  The mode parameter can\n              be one of the following values :\n\n              XDL_PATCH_NORMAL Perform standard patching like if the patch\n              memory file mmfp has been created using mmf as \"old\" file.\n\n              XDL_PATCH_REVERSE Apply the reverse patch. That means that the\n              mmf memory file has to be considered as if it was specified as\n              \"new\" file during the differential operation ( xdl_diff() ). The\n              result of the operation will then be the file content that was\n              used as \"old\" file during the differential operation.\n\n              The following flags can be specified (by or-ing them) to one of\n              the above:\n\n              XDL_PATCH_IGNOREBSPACE Ignore the whitespace at the beginning\n              and the end of the line.\n\n              The ecb will be used by the patch algorithm to create the result\n              file while the rjecb will be used to emit all differential\n              chunks that cannot be applied.  Like explained above, callbacks\n              are always called with entire records to guarantee atomicity of\n              the resulting output.  The function returns 0 if succeeded with-\n              out performing any fuzzy hunk detection, a positive value if it\n              secceeded with fuzzy hunk detection or -1 if an error occurred\n              during the patch operation.\n\n\n       int xdl_merge3(mmfile_t *mmfo, mmfile_t *mmf1, mmfile_t *mmf2,\n       xdemitcb_t *ecb, xdemitcb_t *rjecb);\n\n              Merges three files together. The mmfo file is the original one,\n              while mmf1 and mmf2 are two modified versions of mmfo.  The\n              function works by creating a differential between mmfo and mmf2\n              and by applying the resulting patch to mmf1.  Because of this\n              sequence, mmf1 changes will be privileged against the ones of\n              mmf2.  The ecb will be used by the patch algorithm to create the\n              result file while the rjecb will be used to emit all differen-\n              tial chunks that cannot be applied.  Like explained above, call-\n              backs are always called with entire records to guarantee atomic-\n              ity of the resulting output.  The function returns 0 if suc-\n              ceeded or -1 if an error occurred during the patch operation.\n\n\n       int xdl_bdiff(mmfile_t *mmf1, mmfile_t *mmf2, bdiffparam_t const *bdp,\n       xdemitcb_t *ecb);\n\n              Request to create the difference between the two text memory\n              files mmf1 and mmf2.  The mmf1 memory files is considered the\n              \"old\" file while mmf2 is considered the \"new\" file. So the func-\n              tion will create a patch file that once applied to mmf1 will\n              give mmf2 as result. Files mmf1 and mmf2 must be compact to make\n              it easy and faster to perform the difference operation.  Func-\n              tions are available to check for compactness ( xdl_mmfile_iscom-\n              pact() ) and to make compact a non-compact file (\n              xdl_mmfile_compact() ). An example of how to create a compact\n              memory file (described inside the test subdirectory) is :\n\n                   int xdlt_load_mmfile(char const *fname, mmfile_t *mf, int binmode) {\n                        char cc;\n                        int fd;\n                        long size, bsize;\n                        char *blk;\n\n                        if (xdl_init_mmfile(mf, XDLT_STD_BLKSIZE, XDL_MMF_ATOMIC) < 0)\n                             return -1;\n                        if ((fd = open(fname, O_RDONLY)) == -1) {\n                             perror(fname);\n                             xdl_free_mmfile(mf);\n                             return -1;\n                        }\n                        if ((size = bsize = lseek(fd, 0, SEEK_END)) > 0 && !binmode) {\n                             if (lseek(fd, -1, SEEK_END) != (off_t) -1 &&\n                                 read(fd, &cc, 1) && cc != '\\n')\n                                  bsize++;\n                        }\n                        lseek(fd, 0, SEEK_SET);\n                        if (!(blk = (char *) xdl_mmfile_writeallocate(mf, bsize))) {\n                             xdl_free_mmfile(mf);\n                             close(fd);\n                             return -1;\n                        }\n                        if (read(fd, blk, (size_t) size) != (size_t) size) {\n                             perror(fname);\n                             xdl_free_mmfile(mf);\n                             close(fd);\n                             return -1;\n                        }\n                        close(fd);\n                        if (bsize > size)\n                             blk[size] = '\\n';\n                        return 0;\n                   }\n\n              The bdp parameter points to a structure :\n\n                   typedef struct s_bdiffparam {\n                        long bsize;\n                   } bdiffparam_t;\n\n              that is used to pass information to the binary file differential\n              algorithm.  The bsize parameter specify the size of the block\n              that will be used to decompose mmf1 during the block classifica-\n              tion phase of the algorithm (see MacDonald paper).  Suggested\n              values go from 16 to 64, with a preferred power of two charac-\n              teristic.  The ecb parameter is used to pass the emission call-\n              back to the algorithm responsible of the output file creation.\n              The function returns 0 if succeede or -1 if an error is\n              occurred.\n\n\n       int xdl_bdiff_mb(mmbuffer_t *mmb1, mmbuffer_t *mmb2, bdiffparam_t const\n       *bdp, xdemitcb_t *ecb);\n\n              Same as xdl_bdiff() but it works on memory buffer directly. The\n              xdl_bdiff() is implemented internally with a xdl_bdiff_mb()\n              after having setup the two memory buffers from the passed memory\n              files (that must be compact, as described above). The memory\n              buffer structure is defined as :\n\n                   typedef struct s_mmbuffer {\n                        char *ptr;\n                        long size;\n                   } mmbuffer_t;\n\n              An empty memory buffer is specified by setting the ptr member as\n              NULL and the size member as zero. The reason of having this\n              function is to avoid the memory file preparation, that might\n              involve copying memory from other sources. Using the\n              xdl_bdiff_mb(), the caller can setup the two memory buffer by\n              using, for example, mmap(2), and hence avoiding unnecessary mem-\n              ory copies. The other parameters and the return value of the\n              function xdl_bdiff_mb() are the same as the ones already\n              described in xdl_bdiff().\n\n\n       int xdl_rabdiff(mmfile_t *mmf1, mmfile_t *mmf2, xdemitcb_t *ecb);\n\n              Request to create the difference between the two text memory\n              files mmf1 and mmf2 using the Rabin's polynomial fingerprinting\n              algorithm. This algorithm typically performs faster and produces\n              smaller deltas, when compared to the XDelta-like one.  The mmf1\n              memory files is considered the \"old\" file while mmf2 is consid-\n              ered the \"new\" file. So the function will create a patch file\n              that once applied to mmf1 will give mmf2 as result. Files mmf1\n              and mmf2 must be compact to make it easy and faster to perform\n              the difference operation.  Functions are available to check for\n              compactness ( xdl_mmfile_iscompact() ) and to make compact a\n              non-compact file ( xdl_mmfile_compact() ). The ecb parameter is\n              used to pass the emission callback to the algorithm responsible\n              of the output file creation.  The function returns 0 if succeede\n              or -1 if an error is occurred.\n\n\n       int xdl_rabdiff_mb(mmbuffer_t *mmb1, mmbuffer_t *mmb2, xdemitcb_t\n       *ecb);\n\n              Same as xdl_rabdiff() but it works on memory buffer directly.\n              The memory buffer structure is defined as :\n\n                   typedef struct s_mmbuffer {\n                        char *ptr;\n                        long size;\n                   } mmbuffer_t;\n\n              An empty memory buffer is specified by setting the ptr member as\n              NULL and the size member as zero. The reason of having this\n              function is to avoid the memory file preparation, that might\n              involve copying memory from other sources. Using the xdl_rabd-\n              iff_mb(), the caller can setup the two memory buffer by using,\n              for example, mmap(2), and hence avoiding unnecessary memory\n              copies. The other parameters and the return value of the func-\n              tion xdl_rabdiff_mb() are the same as the ones already described\n              in xdl_rabdiff().\n\n\n       long xdl_bdiff_tgsize(mmfile_t *mmfp);\n\n              Given a binary memory file patch, it returns the size that the\n              result file will have once the patch is applied to the target\n              file. It can be used to pre-allocate (or write-allocate) a mem-\n              ory block to store the patch result so that a compact file will\n              be available at the end of the operation. The function returns\n              the requested size, or -1 if an error occurred during the opera-\n              tion.\n\n\n       int xdl_bpatch(mmfile_t *mmf, mmfile_t *mmfp, xdemitcb_t *ecb);\n\n              Request to patch the binary memory file mmf using the binary\n              patch file stored in mmfp.  The mmf memory file is not changed\n              during the operation and can be considered as read only. The\n              binary patch algorithm has no notion of context, so the patch\n              operation cannot be partial (either success or failure). The ecb\n              parameter contain the callabck (see above for description) used\n              by the binary patch algorithm to emit the result file. The func-\n              tion returns 0 if succeeded or -1 if an error occurred during\n              the patch operation.\n\n\nSEE ALSO\n       Two papers drove the content of this library and these are :\n\n       o      File System Support for Delta Compression by Joshua P. MacDonald\n              http://www.xmailserver.org/xdfs.pdf\n\n       o      Fingerprinting by Random Polynomials by Michael O. Rabin\n              http://www.xmailserver.org/rabin.pdf\n\n       o      An O(ND) Difference Algorithm and Its Variations by Eugene W.\n              Myers http://www.xmailserver.org/diff2.pdf\n\n\n       Also usefull information can be looked up inside the diffutil GNU pack-\n       age :\n\n       http://www.gnu.org/software/diffutils/diffutils.html\n\n\nLICENSE\n       This library is free software; you can redistribute it and/or modify it\n       under the terms of the GNU Lesser General Public License as published\n       by the Free Software Foundation; either version 2.1 of the License, or\n       (at your option) any later version.  A copy of the license is available\n       at :\n\n       http://www.gnu.org/copyleft/lesser.html\n\n\nAUTHOR\n       Developed by Davide Libenzi <davidel@xmailserver.org>\n\n\nAVAILABILITY\n       The latest version of LibXDiff can be found at :\n\n       http://www.xmailserver.org/xdiff-lib.html\n\n\nBUGS\n       There are no known bugs.  Bug reports and comments to Davide Libenzi\n       <davidel@xmailserver.org>\n\n\n\n\nGNU                                  0.23                          LibXDiff(3)\n\n```\n\n**ref/git/xdiff/xdiff.h**\n```\n/*\n *  LibXDiff by Davide Libenzi ( File Differential Library )\n *  Copyright (C) 2003  Davide Libenzi\n *\n *  This library is free software; you can redistribute it and/or\n *  modify it under the terms of the GNU Lesser General Public\n *  License as published by the Free Software Foundation; either\n *  version 2.1 of the License, or (at your option) any later version.\n *\n *  This library is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n *  Lesser General Public License for more details.\n *\n *  You should have received a copy of the GNU Lesser General Public\n *  License along with this library; if not, see\n *  <http://www.gnu.org/licenses/>.\n *\n *  Davide Libenzi <davidel@xmailserver.org>\n *\n */\n\n#if !defined(XDIFF_H)\n#define XDIFF_H\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif /* #ifdef __cplusplus */\n\n/* xpparm_t.flags */\n#define XDF_NEED_MINIMAL (1 << 0)\n\n#define XDF_IGNORE_WHITESPACE (1 << 1)\n#define XDF_IGNORE_WHITESPACE_CHANGE (1 << 2)\n#define XDF_IGNORE_WHITESPACE_AT_EOL (1 << 3)\n#define XDF_IGNORE_CR_AT_EOL (1 << 4)\n#define XDF_WHITESPACE_FLAGS (XDF_IGNORE_WHITESPACE | \\\n\t\t\t      XDF_IGNORE_WHITESPACE_CHANGE | \\\n\t\t\t      XDF_IGNORE_WHITESPACE_AT_EOL | \\\n\t\t\t      XDF_IGNORE_CR_AT_EOL)\n\n#define XDF_IGNORE_BLANK_LINES (1 << 7)\n\n#define XDF_PATIENCE_DIFF (1 << 14)\n#define XDF_HISTOGRAM_DIFF (1 << 15)\n#define XDF_DIFF_ALGORITHM_MASK (XDF_PATIENCE_DIFF | XDF_HISTOGRAM_DIFF)\n#define XDF_DIFF_ALG(x) ((x) & XDF_DIFF_ALGORITHM_MASK)\n\n#define XDF_INDENT_HEURISTIC (1 << 23)\n\n/* xdemitconf_t.flags */\n#define XDL_EMIT_FUNCNAMES (1 << 0)\n#define XDL_EMIT_NO_HUNK_HDR (1 << 1)\n#define XDL_EMIT_FUNCCONTEXT (1 << 2)\n\n/* merge simplification levels */\n#define XDL_MERGE_MINIMAL 0\n#define XDL_MERGE_EAGER 1\n#define XDL_MERGE_ZEALOUS 2\n#define XDL_MERGE_ZEALOUS_ALNUM 3\n\n/* merge favor modes */\n#define XDL_MERGE_FAVOR_OURS 1\n#define XDL_MERGE_FAVOR_THEIRS 2\n#define XDL_MERGE_FAVOR_UNION 3\n\n/* merge output styles */\n#define XDL_MERGE_DIFF3 1\n#define XDL_MERGE_ZEALOUS_DIFF3 2\n\ntypedef struct s_mmfile {\n\tchar *ptr;\n\tlong size;\n} mmfile_t;\n\ntypedef struct s_mmbuffer {\n\tchar *ptr;\n\tlong size;\n} mmbuffer_t;\n\ntypedef struct s_xpparam {\n\tunsigned long flags;\n\n\t/* -I<regex> */\n\tregex_t **ignore_regex;\n\tsize_t ignore_regex_nr;\n\n\t/* See Documentation/diff-options.txt. */\n\tchar **anchors;\n\tsize_t anchors_nr;\n} xpparam_t;\n\ntypedef struct s_xdemitcb {\n\tvoid *priv;\n\tint (*out_hunk)(void *,\n\t\t\tlong old_begin, long old_nr,\n\t\t\tlong new_begin, long new_nr,\n\t\t\tconst char *func, long funclen);\n\tint (*out_line)(void *, mmbuffer_t *, int);\n} xdemitcb_t;\n\ntypedef long (*find_func_t)(const char *line, long line_len, char *buffer, long buffer_size, void *priv);\n\ntypedef int (*xdl_emit_hunk_consume_func_t)(long start_a, long count_a,\n\t\t\t\t\t    long start_b, long count_b,\n\t\t\t\t\t    void *cb_data);\n\ntypedef struct s_xdemitconf {\n\tlong ctxlen;\n\tlong interhunkctxlen;\n\tunsigned long flags;\n\tfind_func_t find_func;\n\tvoid *find_func_priv;\n\txdl_emit_hunk_consume_func_t hunk_func;\n} xdemitconf_t;\n\ntypedef struct s_bdiffparam {\n\tlong bsize;\n} bdiffparam_t;\n\n\n#define xdl_malloc(x) xmalloc(x)\n#define xdl_calloc(n, sz) xcalloc(n, sz)\n#define xdl_free(ptr) free(ptr)\n#define xdl_realloc(ptr,x) xrealloc(ptr,x)\n\nvoid *xdl_mmfile_first(mmfile_t *mmf, long *size);\nlong xdl_mmfile_size(mmfile_t *mmf);\n\nint xdl_diff(mmfile_t *mf1, mmfile_t *mf2, xpparam_t const *xpp,\n\t     xdemitconf_t const *xecfg, xdemitcb_t *ecb);\n\ntypedef struct s_xmparam {\n\txpparam_t xpp;\n\tint marker_size;\n\tint level;\n\tint favor;\n\tint style;\n\tconst char *ancestor;\t/* label for orig */\n\tconst char *file1;\t/* label for mf1 */\n\tconst char *file2;\t/* label for mf2 */\n} xmparam_t;\n\n#define DEFAULT_CONFLICT_MARKER_SIZE 7\n\nint xdl_merge(mmfile_t *orig, mmfile_t *mf1, mmfile_t *mf2,\n\t\txmparam_t const *xmp, mmbuffer_t *result);\n\n#ifdef __cplusplus\n}\n#endif /* #ifdef __cplusplus */\n\n#endif /* #if !defined(XDIFF_H) */\n\n```\n\n**ref/git/xdiff/xdiffi.h**\n```\n/*\n *  LibXDiff by Davide Libenzi ( File Differential Library )\n *  Copyright (C) 2003  Davide Libenzi\n *\n *  This library is free software; you can redistribute it and/or\n *  modify it under the terms of the GNU Lesser General Public\n *  License as published by the Free Software Foundation; either\n *  version 2.1 of the License, or (at your option) any later version.\n *\n *  This library is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n *  Lesser General Public License for more details.\n *\n *  You should have received a copy of the GNU Lesser General Public\n *  License along with this library; if not, see\n *  <http://www.gnu.org/licenses/>.\n *\n *  Davide Libenzi <davidel@xmailserver.org>\n *\n */\n\n#if !defined(XDIFFI_H)\n#define XDIFFI_H\n\n\ntypedef struct s_diffdata {\n\tlong nrec;\n\tunsigned long const *ha;\n\tlong *rindex;\n\tchar *rchg;\n} diffdata_t;\n\ntypedef struct s_xdalgoenv {\n\tlong mxcost;\n\tlong snake_cnt;\n\tlong heur_min;\n} xdalgoenv_t;\n\ntypedef struct s_xdchange {\n\tstruct s_xdchange *next;\n\tlong i1, i2;\n\tlong chg1, chg2;\n\tint ignore;\n} xdchange_t;\n\n\n\nint xdl_recs_cmp(diffdata_t *dd1, long off1, long lim1,\n\t\t diffdata_t *dd2, long off2, long lim2,\n\t\t long *kvdf, long *kvdb, int need_min, xdalgoenv_t *xenv);\nint xdl_do_diff(mmfile_t *mf1, mmfile_t *mf2, xpparam_t const *xpp,\n\t\txdfenv_t *xe);\nint xdl_change_compact(xdfile_t *xdf, xdfile_t *xdfo, long flags);\nint xdl_build_script(xdfenv_t *xe, xdchange_t **xscr);\nvoid xdl_free_script(xdchange_t *xscr);\nint xdl_emit_diff(xdfenv_t *xe, xdchange_t *xscr, xdemitcb_t *ecb,\n\t\t  xdemitconf_t const *xecfg);\nint xdl_do_patience_diff(xpparam_t const *xpp, xdfenv_t *env);\nint xdl_do_histogram_diff(xpparam_t const *xpp, xdfenv_t *env);\n\n#endif /* #if !defined(XDIFFI_H) */\n\n```<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n\n","ts":1.738866140661E9}
{"completion":"**Project Document: xdiffpp**\n\n**Overview**\n\nxdiffpp is a C++ wrapper for the xdiff library, which is a file differential library used in the Git project. The goal of xdiffpp is to provide a modern and easy-to-use C++ interface to the xdiff library, making it easier for developers to integrate xdiff functionality into their applications.\n\n**Goals**\n\n* Provide a C++ wrapper for the xdiff library that is easy to use and understand.\n* Support all the features of the xdiff library, including text and binary diff, patch, and merge.\n* Use modern C++ features and best practices to ensure the wrapper is efficient, reliable, and maintainable.\n* Provide documentation and examples to help developers get started with using xdiffpp.\n\n**Task List**\n\n1. **Initial Setup**\n\t* Create a new C++ project for xdiffpp.\n\t* Set up the build system (e.g., CMake) to compile and link against the xdiff library.\n2. **xdiff Library Analysis**\n\t* Study the xdiff library documentation and source code to understand its API and functionality.\n\t* Identify the key functions and data structures that need to be wrapped.\n3. **C++ Wrapper Implementation**\n\t* Implement the C++ wrapper for the xdiff library, starting with the basic functions (e.g., `xdl_diff`, `xdl_patch`, `xdl_merge`).\n\t* Use modern C++ features (e.g., smart pointers, containers) to ensure the wrapper is efficient and easy to use.\n4. **Text Diff Implementation**\n\t* Implement the text diff functionality, including support for different diff algorithms (e.g., Myers, patience, histogram).\n\t* Provide options for customizing the diff output (e.g., context size, ignore whitespace).\n5. **Binary Diff Implementation**\n\t* Implement the binary diff functionality, including support for different diff algorithms (e.g., Rabin's polynomial fingerprinting).\n\t* Provide options for customizing the diff output (e.g., block size).\n6. **Patch Implementation**\n\t* Implement the patch functionality, including support for applying patches to files.\n\t* Provide options for customizing the patch output (e.g., ignore whitespace).\n7. **Merge Implementation**\n\t* Implement the merge functionality, including support for merging three files.\n\t* Provide options for customizing the merge output (e.g., conflict marker size).\n8. **Testing and Debugging**\n\t* Write unit tests and integration tests to ensure the wrapper is working correctly.\n\t* Debug any issues that arise during testing.\n9. **Documentation and Examples**\n\t* Write documentation for the xdiffpp wrapper, including API documentation and user guides.\n\t* Provide examples of how to use the wrapper in different scenarios.\n\n**Timeline**\n\nThe project is expected to take approximately 3-6 months to complete, depending on the complexity of the implementation and the amount of time devoted to testing and debugging.\n\n**Deliverables**\n\n* A fully functional C++ wrapper for the xdiff library (xdiffpp).\n* Documentation for the xdiffpp wrapper, including API documentation and user guides.\n* Examples of how to use the wrapper in different scenarios.\n* Unit tests and integration tests to ensure the wrapper is working correctly.","ts":1.73886616263E9}
