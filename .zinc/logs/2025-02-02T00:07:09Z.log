{"prompt":"<|begin_of_text|><|start_header_id|>user<|end_header_id|>\n\nCould you improve tests/test_http.cpp ? It looks like these servers give predictable output that could be used to verify the behavior of the client; in fact it looks like the string POST code is presently failing to post its data. Don't worry about the #define, this was to quickly bound the behavior of zinc::generator when passed temporaries during extended troubleshooting, although a test for that somewhere should stick around it does not need to be here.\n\n**include/zinc/http.hpp**\n```\n#pragma once\n\n#include <string>\n#include <string_view>\n\n#include <zinc/common.hpp>\n\nnamespace zinc {\n\nclass HTTP {\npublic:\n    using Header = StringViewPair;\n\n    // Perform an HTTP request (GET or POST) with custom headers and yield lines as they are received\n    static zinc::generator<std::string_view> request_lines(\n        std::string_view method,\n        std::string_view url,\n        std::string_view body = {},\n        std::span<Header const> headers = {}\n    );\n\n    // Perform an HTTP request (GET or POST) with custom headers and return the entire response as a string\n    static std::string request_string(\n        std::string_view method,\n        std::string_view url,\n        std::string_view body = {},\n        std::span<Header const> headers = {}\n    );\n};\n\n} // namespace zinc\n\n```\n\n**tests/test_http.cpp**\n```\n#include <array>\n#include <iostream>\n#include <string>\n#include <string_view>\n#include <span>\n#include <utility>\n\n\n#include <zinc/http.hpp>\n\nvoid test_http_client() {\n    using namespace zinc;\n\n    // Define URLs for testing\n    const std::string_view http_get_url = \"http://httpbin.org/get\";\n    const std::string_view https_get_url = \"https://jsonplaceholder.typicode.com/posts/1\";\n    const std::string_view http_post_url = \"http://httpbin.org/post\";\n    const std::string_view https_post_url = \"https://jsonplaceholder.typicode.com/posts\";\n\n    // Define headers for testing\n    //auto headers = std::to_array<HTTP::Header>({\n#define headers span<HTTP::Header>({\\\n        {\"User-Agent\", \"zinc-http-client\"},\\\n        {\"Accept\", \"application/json\"}\\\n    })\n\n    // Define body for POST requests\n    std::string_view post_body = R\"({\"title\": \"foo\", \"body\": \"bar\", \"userId\": 1})\";\n\n    // Test GET with string\n    std::cout << \"\\nTesting GET with string on HTTP URL:\\n\";\n    std::string response_str = HTTP::request_string(\"GET\", http_get_url, {}, headers);\n    std::cout << response_str << \"\\n\";\n\n    std::cout << \"\\nTesting GET with string on HTTPS URL:\\n\";\n    response_str = HTTP::request_string(\"GET\", https_get_url, {}, headers);\n    std::cout << response_str << \"\\n\";\n\n    // Test GET with generator\n    std::cout << \"Testing GET with generator on HTTP URL:\\n\";\n    for (auto line : HTTP::request_lines(\"GET\", http_get_url, {}, headers)) {\n        std::cout << line << \"\\n\";\n    }\n\n    std::cout << \"\\nTesting GET with generator on HTTPS URL:\\n\";\n    for (auto line : HTTP::request_lines(\"GET\", https_get_url, {}, headers)) {\n        std::cout << line << \"\\n\";\n    }\n\n    // Test POST with string\n    std::cout << \"\\nTesting POST with string on HTTP URL:\\n\";\n    response_str = HTTP::request_string(\"POST\", http_post_url, post_body, headers);\n    std::cout << response_str << \"\\n\";\n\n    std::cout << \"\\nTesting POST with string on HTTPS URL:\\n\";\n    response_str = HTTP::request_string(\"POST\", https_post_url, post_body, headers);\n    std::cout << response_str << \"\\n\";\n\n    // Test POST with generator\n    std::cout << \"\\nTesting POST with generator on HTTP URL:\\n\";\n    for (auto line : HTTP::request_lines(\"POST\", http_post_url, post_body, headers)) {\n        std::cout << line << \"\\n\";\n    }\n\n    std::cout << \"\\nTesting POST with generator on HTTPS URL:\\n\";\n    for (auto line : HTTP::request_lines(\"POST\", https_post_url, post_body, headers)) {\n        std::cout << line << \"\\n\";\n    }\n}\n\nint main() {\n    test_http_client();\n    return 0;\n}\n\n```\n\n**`build/test_http`**\n```\n\nTesting GET with string on HTTP URL:\n{\n  \"args\": {}, \n  \"headers\": {\n    \"Accept\": \"application/json\", \n    \"Host\": \"httpbin.org\", \n    \"User-Agent\": \"zinc-http-client\", \n    \"X-Amzn-Trace-Id\": \"Root=1-679eb72d-42904f857343ea572732c5c5\"\n  }, \n  \"origin\": \"34.86.117.205\", \n  \"url\": \"http://httpbin.org/get\"\n}\n\n\nTesting GET with string on HTTPS URL:\n{\n  \"userId\": 1,\n  \"id\": 1,\n  \"title\": \"sunt aut facere repellat provident occaecati excepturi optio reprehenderit\",\n  \"body\": \"quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto\"\n}\nTesting GET with generator on HTTP URL:\n{\n  \"args\": {}, \n  \"headers\": {\n    \"Accept\": \"application/json\", \n    \"Host\": \"httpbin.org\", \n    \"User-Agent\": \"zinc-http-client\", \n    \"X-Amzn-Trace-Id\": \"Root=1-679eb72d-05ec7f8642ceef3376a43e53\"\n  }, \n  \"origin\": \"34.86.117.205\", \n  \"url\": \"http://httpbin.org/get\"\n}\n\nTesting GET with generator on HTTPS URL:\n{\n  \"userId\": 1,\n  \"id\": 1,\n  \"title\": \"sunt aut facere repellat provident occaecati excepturi optio reprehenderit\",\n  \"body\": \"quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto\"\n}\n\nTesting POST with string on HTTP URL:\n{\n  \"args\": {}, \n  \"headers\": {\n    \"Accept\": \"application/json\", \n    \"Host\": \"httpbin.org\", \n    \"User-Agent\": \"zinc-http-client\", \n    \"X-Amzn-Trace-Id\": \"Root=1-679eb72d-7dfddbe51fe5fc163a311aed\"\n  }, \n  \"origin\": \"34.86.117.205\", \n  \"url\": \"http://httpbin.org/get\"\n}\n\n\nTesting POST with string on HTTPS URL:\n{\n  \"userId\": 1,\n  \"id\": 1,\n  \"title\": \"sunt aut facere repellat provident occaecati excepturi optio reprehenderit\",\n  \"body\": \"quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto\"\n}\n\nTesting POST with generator on HTTP URL:\n{\n  \"args\": {}, \n  \"data\": \"{\\\"title\\\": \\\"foo\\\", \\\"body\\\": \\\"bar\\\", \\\"userId\\\": 1}\", \n  \"files\": {}, \n  \"form\": {}, \n  \"headers\": {\n    \"Accept\": \"application/json\", \n    \"Content-Length\": \"44\", \n    \"Host\": \"httpbin.org\", \n    \"User-Agent\": \"zinc-http-client\", \n    \"X-Amzn-Trace-Id\": \"Root=1-679eb72e-63d1a3f901cc21d831fae27a\"\n  }, \n  \"json\": {\n    \"body\": \"bar\", \n    \"title\": \"foo\", \n    \"userId\": 1\n  }, \n  \"origin\": \"34.86.117.205\", \n  \"url\": \"http://httpbin.org/post\"\n}\n\nTesting POST with generator on HTTPS URL:\n{\n  \"id\": 101\n}\n```\n\n**tests/test_configuration.cpp**\n```\n#define BOOST_TEST_MAIN\n#include <boost/test/unit_test.hpp>\n#include <zinc/configuration.hpp>\n#include <filesystem>\n#include <thread>\n\nnamespace fs = std::filesystem;\n\nBOOST_AUTO_TEST_SUITE(ConfigurationTest)\n\nBOOST_AUTO_TEST_CASE(init)\n{\n    // Create a temporary directory\n    fs::path temp_dir = fs::temp_directory_path() / \"zinc-test\";\n    fs::create_directory(temp_dir);\n\n    // Change into the temporary directory\n    fs::current_path(temp_dir);\n\n    // Call init() and check that a .zinc directory is created\n    BOOST_CHECK(zinc::Configuration::init());\n    BOOST_CHECK(fs::exists(\".zinc\"));\n\n    // Clean up\n    fs::remove_all(temp_dir);\n}\n\nBOOST_AUTO_TEST_CASE(path_local)\n{\n    // Create a temporary directory with a .zinc subdirectory\n    fs::path temp_dir = fs::temp_directory_path() / \"zinc-test\";\n    fs::create_directory(temp_dir);\n    fs::create_directory(temp_dir / \".zinc\");\n\n    // Change into the temporary directory\n    fs::current_path(temp_dir);\n\n    // Get the local configuration path\n    std::string_view path = zinc::Configuration::path_local();\n\n    // Check that the path is correct\n    BOOST_CHECK_EQUAL(path, (temp_dir / \".zinc\").native());\n\n    // Clean up\n    fs::remove_all(temp_dir);\n}\n\n/*\nBOOST_AUTO_TEST_CASE(path_user)\n{\n    // Get the user configuration path\n    std::string_view path = zinc::Configuration::path_user();\n\n    // Check that the path is correct\n    fs::path expected_path = fs::path(getenv(\"XDG_CONFIG_HOME\"));\n    if (expected_path.empty()) {\n        expected_path = fs::path(getenv(\"HOME\")) / \".config\";\n    }\n    expected_path /= \"zinc\";\n    BOOST_CHECK_EQUAL(path, expected_path.native());\n}\n*/\n\nBOOST_AUTO_TEST_CASE(path_local_subpaths)\n{\n    // Create a temporary directory with a .zinc subdirectory\n    fs::path temp_dir = fs::temp_directory_path() / \"zinc-test\";\n    fs::create_directory(temp_dir);\n    fs::create_directory(temp_dir / \".zinc\");\n\n    // Change into the temporary directory\n    fs::current_path(temp_dir);\n\n    // Get the local configuration path with subpaths\n    std::string_view path = zinc::Configuration::path_local(zinc::span<std::string_view>({\"subdir\", \"subsubdir\"}), true);\n\n    // Check that the path is correct\n    BOOST_CHECK_EQUAL(path, (temp_dir / \".zinc\" / \"subdir\" / \"subsubdir\" / \"\").native());\n\n    // Clean up\n    fs::remove_all(temp_dir);\n}\n\nBOOST_AUTO_TEST_CASE(path_user_subpaths)\n{\n    fs::path expected_path = zinc::Configuration::path_user();\n\n    // Get the user configuration path with subpaths\n    std::string_view path = zinc::Configuration::path_user(zinc::span<std::string_view>({\"subdir\", \"subsubdir\"}), true);\n\n    expected_path /= \"subdir\";\n    expected_path /= \"subsubdir\";\n    expected_path /= \"\";\n    BOOST_CHECK_EQUAL(path, expected_path.native());\n\n    // Clean up\n    fs::remove_all(expected_path.parent_path().parent_path());\n}\n\nBOOST_AUTO_TEST_SUITE_END()\n\n```<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n\n","ts":1.738454830088E9}
{"completion":"Here's an improved version of `tests/test_http.cpp` that includes assertions to verify the behavior of the client:\n\n```cpp\n#include <array>\n#include <iostream>\n#include <string>\n#include <string_view>\n#include <span>\n#include <utility>\n#include <boost/test/unit_test.hpp>\n\n#include <zinc/http.hpp>\n\nBOOST_AUTO_TEST_SUITE(HTTPTest)\n\nBOOST_AUTO_TEST_CASE(get_string_http)\n{\n    using namespace zinc;\n\n    const std::string_view http_get_url = \"http://httpbin.org/get\";\n    auto headers = std::span<HTTP::Header>({\n        {\"User-Agent\", \"zinc-http-client\"},\n        {\"Accept\", \"application/json\"}\n    });\n\n    std::string response_str = HTTP::request_string(\"GET\", http_get_url, {}, headers);\n    BOOST_CHECK(response_str.find(\"http://httpbin.org/get\") != std::string::npos);\n    BOOST_CHECK(response_str.find(\"application/json\") != std::string::npos);\n    BOOST_CHECK(response_str.find(\"zinc-http-client\") != std::string::npos);\n}\n\nBOOST_AUTO_TEST_CASE(get_string_https)\n{\n    using namespace zinc;\n\n    const std::string_view https_get_url = \"https://jsonplaceholder.typicode.com/posts/1\";\n    auto headers = std::span<HTTP::Header>({\n        {\"User-Agent\", \"zinc-http-client\"},\n        {\"Accept\", \"application/json\"}\n    });\n\n    std::string response_str = HTTP::request_string(\"GET\", https_get_url, {}, headers);\n    BOOST_CHECK(response_str.find(\"sunt aut facere repellat provident occaecati excepturi optio reprehenderit\") != std::string::npos);\n}\n\nBOOST_AUTO_TEST_CASE(get_generator_http)\n{\n    using namespace zinc;\n\n    const std::string_view http_get_url = \"http://httpbin.org/get\";\n    auto headers = std::span<HTTP::Header>({\n        {\"User-Agent\", \"zinc-http-client\"},\n        {\"Accept\", \"application/json\"}\n    });\n\n    bool found_url = false;\n    bool found_accept = false;\n    bool found_user_agent = false;\n    for (auto line : HTTP::request_lines(\"GET\", http_get_url, {}, headers)) {\n        if (line.find(\"http://httpbin.org/get\") != std::string::npos) {\n            found_url = true;\n        }\n        if (line.find(\"application/json\") != std::string::npos) {\n            found_accept = true;\n        }\n        if (line.find(\"zinc-http-client\") != std::string::npos) {\n            found_user_agent = true;\n        }\n    }\n    BOOST_CHECK(found_url);\n    BOOST_CHECK(found_accept);\n    BOOST_CHECK(found_user_agent);\n}\n\nBOOST_AUTO_TEST_CASE(get_generator_https)\n{\n    using namespace zinc;\n\n    const std::string_view https_get_url = \"https://jsonplaceholder.typicode.com/posts/1\";\n    auto headers = std::span<HTTP::Header>({\n        {\"User-Agent\", \"zinc-http-client\"},\n        {\"Accept\", \"application/json\"}\n    });\n\n    bool found_title = false;\n    for (auto line : HTTP::request_lines(\"GET\", https_get_url, {}, headers)) {\n        if (line.find(\"sunt aut facere repellat provident occaecati excepturi optio reprehenderit\") != std::string::npos) {\n            found_title = true;\n        }\n    }\n    BOOST_CHECK(found_title);\n}\n\nBOOST_AUTO_TEST_CASE(post_string_http)\n{\n    using namespace zinc;\n\n    const std::string_view http_post_url = \"http://httpbin.org/post\";\n    auto headers = std::span<HTTP::Header>({\n        {\"User-Agent\", \"zinc-http-client\"},\n        {\"Accept\", \"application/json\"}\n    });\n    std::string_view post_body = R\"({\"title\": \"foo\", \"body\": \"bar\", \"userId\": 1})\";\n\n    std::string response_str = HTTP::request_string(\"POST\", http_post_url, post_body, headers);\n    BOOST_CHECK(response_str.find(\"http://httpbin.org/post\") != std::string::npos);\n    BOOST_CHECK(response_str.find(\"application/json\") != std::string::npos);\n    BOOST_CHECK(response_str.find(\"zinc-http-client\") != std::string::npos);\n    BOOST_CHECK(response_str.find(post_body) != std::string::npos);\n}\n\nBOOST_AUTO_TEST_CASE(post_string_https)\n{\n    using namespace zinc;\n\n    const std::string_view https_post_url = \"https://jsonplaceholder.typicode.com/posts\";\n    auto headers = std::span<HTTP::Header>({\n        {\"User-Agent\", \"zinc-http-client\"},\n        {\"Accept\", \"application/json\"}\n    });\n    std::string_view post_body = R\"({\"title\": \"foo\", \"body\": \"bar\", \"userId\": 1})\";\n\n    std::string response_str = HTTP::request_string(\"POST\", https_post_url, post_body, headers);\n    BOOST_CHECK(response_str.find(\"id\") != std::string::npos);\n}\n\nBOOST_AUTO_TEST_CASE(post_generator_http)\n{\n    using namespace zinc;\n\n    const std::string_view http_post_url = \"http://httpbin.org/post\";\n    auto headers = std::span<HTTP::Header>({\n        {\"User-Agent\", \"zinc-http-client\"},\n        {\"Accept\", \"application/json\"}\n    });\n    std::string_view post_body = R\"({\"title\": \"foo\", \"body\": \"bar\", \"userId\": 1})\";\n\n    bool found_url = false;\n    bool found_accept = false;\n    bool found_user_agent = false;\n    bool found_post_body = false;\n    for (auto line : HTTP::request_lines(\"POST\", http_post_url, post_body, headers)) {\n        if (line.find(\"http://httpbin.org/post\") != std::string::npos) {\n            found_url = true;\n        }\n        if (line.find(\"application/json\") != std::string::npos) {\n            found_accept = true;\n        }\n        if (line.find(\"zinc-http-client\") != std::string::npos) {\n            found_user_agent = true;\n        }\n        if (line.find(post_body) != std::string::npos) {\n            found_post_body = true;\n        }\n    }\n    BOOST_CHECK(found_url);\n    BOOST_CHECK(found_accept);\n    BOOST_CHECK(found_user_agent);\n    BOOST_CHECK(found_post_body);\n}\n\nBOOST_AUTO_TEST_CASE(post_generator_https)\n{\n    using namespace zinc;\n\n    const std::string_view https_post_url = \"https://jsonplaceholder.typicode.com/posts\";\n    auto headers = std::span<HTTP::Header>({\n        {\"User-Agent\", \"zinc-http-client\"},\n        {\"Accept\", \"application/json\"}\n    });\n    std::string_view post_body = R\"({\"title\": \"foo\", \"body\": \"bar\", \"userId\": 1})\";\n\n    bool found_id = false;\n    for (auto line : HTTP::request_lines(\"POST\", https_post_url, post_body, headers)) {\n        if (line.find(\"id\") != std::string::npos) {\n            found_id = true;\n        }\n    }\n    BOOST_CHECK(found_id);\n}\n\nBOOST_AUTO_TEST_SUITE_END()\n```\n\nNote that I've used the `BOOST_AUTO_TEST_CASE` macro to define each test case, and `BOOST_CHECK` to verify the expected behavior. I've also removed the `#define` directive, as it's not necessary in this case.\n\nAlso, I've added more test cases to cover the `POST` requests with both `http` and `https` URLs, and with both `string` and `generator` responses.\n\nYou can run","ts":1.738454883319E9}
