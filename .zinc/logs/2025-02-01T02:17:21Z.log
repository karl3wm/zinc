{"prompt":"<|begin_of_text|><|start_header_id|>user<|end_header_id|>\n\nHow do I add a dependency on boost unit_test only if the user configures the build for tests\n\n**CMakeLists.txt**\n```\n# Minimum CMake version required\ncmake_minimum_required(VERSION 3.18)\n# Project name and version\nproject(ZinC VERSION 0.1 LANGUAGES CXX)\n# Specify the C++ standard\nset(CMAKE_CXX_STANDARD 20)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\nset(CMAKE_CXX_EXTENSIONS OFF)\n\n# Find Boost\nfind_package(Boost 1.81.0 REQUIRED COMPONENTS url json)\nfind_package(OpenSSL REQUIRED) # for boost networking\n\n# Include directories\ninclude_directories(${CMAKE_SOURCE_DIR}/include ${Boost_INCLUDE_DIRS})\n\n# Function to add a test executable\nfunction(add_test_executable TEST_NAME TEST_SOURCE)\n    add_executable(${TEST_NAME} ${TEST_SOURCE})\n    target_link_libraries(${TEST_NAME} PRIVATE zinc)\n    add_test(NAME ${TEST_NAME} COMMAND ${TEST_NAME})\nendfunction()\n\n# Discover all test source files and create executables for each\nfile(GLOB TEST_SOURCES \"tests/*.cpp\")\nforeach(TEST_SOURCE IN LISTS TEST_SOURCES)\n    get_filename_component(TEST_NAME ${TEST_SOURCE} NAME_WE)\n    add_test_executable(${TEST_NAME} ${TEST_SOURCE})\nendforeach()\nenable_testing()\n\n# Create the main library\nfile(GLOB LIB_SOURCES \"src/*.cpp\")\nadd_library(zinc SHARED ${LIB_SOURCES})\ntarget_include_directories(zinc PUBLIC ${CMAKE_SOURCE_DIR}/include)\ntarget_link_libraries(zinc PRIVATE ${Boost_LIBRARIES} ${OPENSSL_LIBRARIES})\n\n# Add tool binaries\nfile(GLOB TOOL_SOURCES \"tools/*.cpp\")\nforeach(TOOL_SOURCE IN LISTS TOOL_SOURCES)\n    get_filename_component(TOOL_NAME ${TOOL_SOURCE} NAME_WE)\n    add_executable(${TOOL_NAME} ${TOOL_SOURCE})\n    target_link_libraries(${TOOL_NAME} PRIVATE zinc)\nendforeach()\n\noption(ENABLE_ASAN \"Enable AddressSanitizer\" ON)\nset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wall -Wextra -pedantic\")\nif(ENABLE_ASAN)\n    set(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} -O0 -ggdb -Werror -fsanitize=address,leak,undefined\")\nelse()\n    set(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} -O0 -ggdb -Werror -fsanitize=undefined\")\nendif()\n\n# Optional: Install targets if needed\n# install(TARGETS zinc_main DESTINATION bin)\n```<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n\n","ts":1.738376241711E9}
{"completion":"You can add a dependency on Boost's unit_test framework only when the user configures the build for tests by using the `option` command to create a toggle for enabling tests, and then using the `if` command to conditionally find and link against the Boost unit_test library.\n\nHere's an updated version of your `CMakeLists.txt` file:\n```cmake\n# ... (rest of the file remains the same)\n\noption(ENABLE_TESTS \"Enable building and running tests\" OFF)\n\nif(ENABLE_TESTS)\n  find_package(Boost 1.81.0 COMPONENTS unit_test_framework)\n  if(NOT Boost_UNIT_TEST_FRAMEWORK_FOUND)\n    message(FATAL_ERROR \"Boost unit_test_framework not found\")\n  endif()\nendif()\n\n# ... (rest of the file remains the same)\n\n# Function to add a test executable\nfunction(add_test_executable TEST_NAME TEST_SOURCE)\n  if(ENABLE_TESTS)\n    add_executable(${TEST_NAME} ${TEST_SOURCE})\n    target_link_libraries(${TEST_NAME} PRIVATE zinc ${Boost_UNIT_TEST_FRAMEWORK_LIBRARY})\n    add_test(NAME ${TEST_NAME} COMMAND ${TEST_NAME})\n  endif()\nendfunction()\n\n# ... (rest of the file remains the same)\n```\nIn this updated version, we've added an `option` command to create a toggle for enabling tests, which is off by default. We then use an `if` command to conditionally find and link against the Boost unit_test library only when tests are enabled.\n\nWe've also updated the `add_test_executable` function to only create the test executable and link against the Boost unit_test library when tests are enabled.\n\nTo enable tests, the user can pass the `-DENABLE_TESTS=ON` flag when running CMake, like this:\n```bash\ncmake -DENABLE_TESTS=ON ..\n```\nThis will enable building and running tests, and the Boost unit_test library will be linked against the test executables. If the user doesn't pass this flag, tests will be disabled, and the Boost unit_test library will not be linked against.","ts":1.738376270083E9}
