{"prompt":"<|begin_of_text|><|start_header_id|>user<|end_header_id|>\n\nchanges.txt reflects information that needs updating in the xdiff manpage. Generate a file containing snippets of a new manpage with updates included. Generate a new changes.txt with addressed items checked off.\n\n**changes.txt**\n```\n**Added**\n[ ] `xpparam_t` struct members: `ignore_regex`, `ignore_regex_nr`, `anchors`, and `anchors_nr`\n[ ] `xdemitconf_t` struct members: `interhunkctxlen`, `find_func`, `find_func_priv`, and `hunk_func`\n[ ] `xdl_emit_hunk_consume_func_t` type definition\n[ ] `find_func_t` type definition\n[ ] `xmparam_t` struct definition\n[ ] `xdl_merge` function declaration\n[ ] `DEFAULT_CONFLICT_MARKER_SIZE` macro definition\n[ ] `XDL_MERGE_MINIMAL`, `XDL_MERGE_EAGER`, `XDL_MERGE_ZEALOUS`, `XDL_MERGE_ZEALOUS_ALNUM`, `XDL_MERGE_FAVOR_OURS`, `XDL_MERGE_FAVOR_THEIRS`, `XDL_MERGE_FAVOR_UNION`, `XDL_MERGE_DIFF3`, and `XDL_MERGE_ZEALOUS_DIFF3` macro definitions\n\n**Removed**\n[ ] `xdl_set_allocator` function declaration\n[ ] `xdl_malloc`, `xdl_free`, and `xdl_realloc` function declarations (replaced with `xmalloc`, `xcalloc`, `xrealloc`, and `free`)\n[ ] `xdl_init_mmfile`, `xdl_free_mmfile`, `xdl_mmfile_iscompact`, `xdl_seek_mmfile`, `xdl_read_mmfile`, `xdl_write_mmfile`, `xdl_writem_mmfile`, `xdl_mmfile_writeallocate`, `xdl_mmfile_ptradd`, `xdl_mmfile_next`, `xdl_mmfile_cmp`, and `xdl_mmfile_compact` function declarations\n[ ] `xdl_bdiff`, `xdl_bdiff_mb`, `xdl_rabdiff`, `xdl_rabdiff_mb`, `xdl_bdiff_tgsize`, and `xdl_bpatch` function declarations\n[ ] `XDL_PATCH_NORMAL`, `XDL_PATCH_REVERSE`, and `XDL_PATCH_IGNOREBSPACE` macro definitions\n\n**Changed**\n[ ] `xpparam_t` struct member `flags` type changed from `unsigned long` to `unsigned long` with additional flag definitions\n[ ] `xdemitconf_t` struct member `flags` type changed from `unsigned long` to `unsigned long` with additional flag definitions\n[ ] `xdl_diff` function declaration changed to take `xpparam_t const *xpp` and `xdemitconf_t const *xecfg` parameters\n\n```\n\n**ref/git/xdiff/xdiff.h**\n```\n/*\n *  LibXDiff by Davide Libenzi ( File Differential Library )\n *  Copyright (C) 2003  Davide Libenzi\n *\n *  This library is free software; you can redistribute it and/or\n *  modify it under the terms of the GNU Lesser General Public\n *  License as published by the Free Software Foundation; either\n *  version 2.1 of the License, or (at your option) any later version.\n *\n *  This library is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n *  Lesser General Public License for more details.\n *\n *  You should have received a copy of the GNU Lesser General Public\n *  License along with this library; if not, see\n *  <http://www.gnu.org/licenses/>.\n *\n *  Davide Libenzi <davidel@xmailserver.org>\n *\n */\n\n#if !defined(XDIFF_H)\n#define XDIFF_H\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif /* #ifdef __cplusplus */\n\n/* xpparm_t.flags */\n#define XDF_NEED_MINIMAL (1 << 0)\n\n#define XDF_IGNORE_WHITESPACE (1 << 1)\n#define XDF_IGNORE_WHITESPACE_CHANGE (1 << 2)\n#define XDF_IGNORE_WHITESPACE_AT_EOL (1 << 3)\n#define XDF_IGNORE_CR_AT_EOL (1 << 4)\n#define XDF_WHITESPACE_FLAGS (XDF_IGNORE_WHITESPACE | \\\n\t\t\t      XDF_IGNORE_WHITESPACE_CHANGE | \\\n\t\t\t      XDF_IGNORE_WHITESPACE_AT_EOL | \\\n\t\t\t      XDF_IGNORE_CR_AT_EOL)\n\n#define XDF_IGNORE_BLANK_LINES (1 << 7)\n\n#define XDF_PATIENCE_DIFF (1 << 14)\n#define XDF_HISTOGRAM_DIFF (1 << 15)\n#define XDF_DIFF_ALGORITHM_MASK (XDF_PATIENCE_DIFF | XDF_HISTOGRAM_DIFF)\n#define XDF_DIFF_ALG(x) ((x) & XDF_DIFF_ALGORITHM_MASK)\n\n#define XDF_INDENT_HEURISTIC (1 << 23)\n\n/* xdemitconf_t.flags */\n#define XDL_EMIT_FUNCNAMES (1 << 0)\n#define XDL_EMIT_NO_HUNK_HDR (1 << 1)\n#define XDL_EMIT_FUNCCONTEXT (1 << 2)\n\n/* merge simplification levels */\n#define XDL_MERGE_MINIMAL 0\n#define XDL_MERGE_EAGER 1\n#define XDL_MERGE_ZEALOUS 2\n#define XDL_MERGE_ZEALOUS_ALNUM 3\n\n/* merge favor modes */\n#define XDL_MERGE_FAVOR_OURS 1\n#define XDL_MERGE_FAVOR_THEIRS 2\n#define XDL_MERGE_FAVOR_UNION 3\n\n/* merge output styles */\n#define XDL_MERGE_DIFF3 1\n#define XDL_MERGE_ZEALOUS_DIFF3 2\n\ntypedef struct s_mmfile {\n\tchar *ptr;\n\tlong size;\n} mmfile_t;\n\ntypedef struct s_mmbuffer {\n\tchar *ptr;\n\tlong size;\n} mmbuffer_t;\n\ntypedef struct s_xpparam {\n\tunsigned long flags;\n\n\t/* -I<regex> */\n\tregex_t **ignore_regex;\n\tsize_t ignore_regex_nr;\n\n\t/* See Documentation/diff-options.txt. */\n\tchar **anchors;\n\tsize_t anchors_nr;\n} xpparam_t;\n\ntypedef struct s_xdemitcb {\n\tvoid *priv;\n\tint (*out_hunk)(void *,\n\t\t\tlong old_begin, long old_nr,\n\t\t\tlong new_begin, long new_nr,\n\t\t\tconst char *func, long funclen);\n\tint (*out_line)(void *, mmbuffer_t *, int);\n} xdemitcb_t;\n\ntypedef long (*find_func_t)(const char *line, long line_len, char *buffer, long buffer_size, void *priv);\n\ntypedef int (*xdl_emit_hunk_consume_func_t)(long start_a, long count_a,\n\t\t\t\t\t    long start_b, long count_b,\n\t\t\t\t\t    void *cb_data);\n\ntypedef struct s_xdemitconf {\n\tlong ctxlen;\n\tlong interhunkctxlen;\n\tunsigned long flags;\n\tfind_func_t find_func;\n\tvoid *find_func_priv;\n\txdl_emit_hunk_consume_func_t hunk_func;\n} xdemitconf_t;\n\ntypedef struct s_bdiffparam {\n\tlong bsize;\n} bdiffparam_t;\n\n\n#define xdl_malloc(x) xmalloc(x)\n#define xdl_calloc(n, sz) xcalloc(n, sz)\n#define xdl_free(ptr) free(ptr)\n#define xdl_realloc(ptr,x) xrealloc(ptr,x)\n\nvoid *xdl_mmfile_first(mmfile_t *mmf, long *size);\nlong xdl_mmfile_size(mmfile_t *mmf);\n\nint xdl_diff(mmfile_t *mf1, mmfile_t *mf2, xpparam_t const *xpp,\n\t     xdemitconf_t const *xecfg, xdemitcb_t *ecb);\n\ntypedef struct s_xmparam {\n\txpparam_t xpp;\n\tint marker_size;\n\tint level;\n\tint favor;\n\tint style;\n\tconst char *ancestor;\t/* label for orig */\n\tconst char *file1;\t/* label for mf1 */\n\tconst char *file2;\t/* label for mf2 */\n} xmparam_t;\n\n#define DEFAULT_CONFLICT_MARKER_SIZE 7\n\nint xdl_merge(mmfile_t *orig, mmfile_t *mf1, mmfile_t *mf2,\n\t\txmparam_t const *xmp, mmbuffer_t *result);\n\n#ifdef __cplusplus\n}\n#endif /* #ifdef __cplusplus */\n\n#endif /* #if !defined(XDIFF_H) */\n\n```\n\n**ref/git/Documentation/diff-options.txt**\n```\n// Please don't remove this comment as asciidoc behaves badly when\n// the first non-empty line is ifdef/ifndef. The symptom is that\n// without this comment the <git-diff-core> attribute conditionally\n// defined below ends up being defined unconditionally.\n// Last checked with asciidoc 7.0.2.\n\nifndef::git-format-patch[]\nifndef::git-diff[]\nifndef::git-log[]\n:git-diff-core: 1\nendif::git-log[]\nendif::git-diff[]\nendif::git-format-patch[]\n\nifdef::git-format-patch[]\n-p::\n--no-stat::\n\tGenerate plain patches without any diffstats.\nendif::git-format-patch[]\n\nifndef::git-format-patch[]\n`-p`::\n`-u`::\n`--patch`::\n\tGenerate patch (see <<generate_patch_text_with_p>>).\nifdef::git-diff[]\n\tThis is the default.\nendif::git-diff[]\n\n`-s`::\n`--no-patch`::\n\tSuppress all output from the diff machinery.  Useful for\n\tcommands like `git show` that show the patch by default to\n\tsquelch their output, or to cancel the effect of options like\n\t`--patch`, `--stat` earlier on the command line in an alias.\n\nendif::git-format-patch[]\n\nifdef::git-log[]\n-m::\n\tShow diffs for merge commits in the default format. This is\n\tsimilar to `--diff-merges=on`, except `-m` will\n\tproduce no output unless `-p` is given as well.\n\n-c::\n\tProduce combined diff output for merge commits.\n\tShortcut for `--diff-merges=combined -p`.\n\n--cc::\n\tProduce dense combined diff output for merge commits.\n\tShortcut for `--diff-merges=dense-combined -p`.\n\n--dd::\n\tProduce diff with respect to first parent for both merge and\n\tregular commits.\n\tShortcut for `--diff-merges=first-parent -p`.\n\n--remerge-diff::\n\tProduce remerge-diff output for merge commits.\n\tShortcut for `--diff-merges=remerge -p`.\n\n--no-diff-merges::\n\tSynonym for `--diff-merges=off`.\n\n--diff-merges=<format>::\n\tSpecify diff format to be used for merge commits. Default is\n\t{diff-merges-default} unless `--first-parent` is in use, in\n\twhich case `first-parent` is the default.\n+\nThe following formats are supported:\n+\n--\noff, none::\n\tDisable output of diffs for merge commits. Useful to override\n\timplied value.\n\non, m::\n\tMake diff output for merge commits to be shown in the default\n\tformat. The default format can be changed using\n\t`log.diffMerges` configuration variable, whose default value\n\tis `separate`.\n\nfirst-parent, 1::\n\tShow full diff with respect to first parent. This is the same\n\tformat as `--patch` produces for non-merge commits.\n\nseparate::\n\tShow full diff with respect to each of parents.\n\tSeparate log entry and diff is generated for each parent.\n\ncombined, c::\n\tShow differences from each of the parents to the merge\n\tresult simultaneously instead of showing pairwise diff between\n\ta parent and the result one at a time. Furthermore, it lists\n\tonly files which were modified from all parents.\n\ndense-combined, cc::\n\tFurther compress output produced by `--diff-merges=combined`\n\tby omitting uninteresting hunks whose contents in the parents\n\thave only two variants and the merge result picks one of them\n\twithout modification.\n\nremerge, r::\n\tRemerge two-parent merge commits to create a temporary tree\n\tobject--potentially containing files with conflict markers\n\tand such.  A diff is then shown between that temporary tree\n\tand the actual merge commit.\n+\nThe output emitted when this option is used is subject to change, and\nso is its interaction with other options (unless explicitly\ndocumented).\n--\n\n--combined-all-paths::\n\tCause combined diffs (used for merge commits) to\n\tlist the name of the file from all parents.  It thus only has\n\teffect when `--diff-merges=[dense-]combined` is in use, and\n\tis likely only useful if filename changes are detected (i.e.\n\twhen either rename or copy detection have been requested).\nendif::git-log[]\n\n`-U<n>`::\n`--unified=<n>`::\n\tGenerate diffs with _<n>_ lines of context instead of\n\tthe usual three.\nifndef::git-format-patch[]\n\tImplies `--patch`.\nendif::git-format-patch[]\n\n`--output=<file>`::\n\tOutput to a specific file instead of stdout.\n\n`--output-indicator-new=<char>`::\n`--output-indicator-old=<char>`::\n`--output-indicator-context=<char>`::\n\tSpecify the character used to indicate new, old or context\n\tlines in the generated patch. Normally they are `+`, `-` and\n\t' ' respectively.\n\nifndef::git-format-patch[]\n`--raw`::\nifndef::git-log[]\n\tGenerate the diff in raw format.\nifdef::git-diff-core[]\n\tThis is the default.\nendif::git-diff-core[]\nendif::git-log[]\nifdef::git-log[]\n\tFor each commit, show a summary of changes using the raw diff\n\tformat. See the \"RAW OUTPUT FORMAT\" section of\n\tlinkgit:git-diff[1]. This is different from showing the log\n\titself in raw format, which you can achieve with\n\t`--format=raw`.\nendif::git-log[]\nendif::git-format-patch[]\n\nifndef::git-format-patch[]\n`--patch-with-raw`::\n\tSynonym for `-p --raw`.\nendif::git-format-patch[]\n\nifdef::git-log[]\n`-t`::\n\tShow the tree objects in the diff output.\nendif::git-log[]\n\n`--indent-heuristic`::\n\tEnable the heuristic that shifts diff hunk boundaries to make patches\n\teasier to read. This is the default.\n\n`--no-indent-heuristic`::\n\tDisable the indent heuristic.\n\n`--minimal`::\n\tSpend extra time to make sure the smallest possible\n\tdiff is produced.\n\n`--patience`::\n\tGenerate a diff using the \"patience diff\" algorithm.\n\n`--histogram`::\n\tGenerate a diff using the \"histogram diff\" algorithm.\n\n`--anchored=<text>`::\n\tGenerate a diff using the \"anchored diff\" algorithm.\n+\nThis option may be specified more than once.\n+\nIf a line exists in both the source and destination, exists only once,\nand starts with _<text>_, this algorithm attempts to prevent it from\nappearing as a deletion or addition in the output. It uses the \"patience\ndiff\" algorithm internally.\n\n`--diff-algorithm=(patience|minimal|histogram|myers)`::\n\tChoose a diff algorithm. The variants are as follows:\n+\n--\n   `default`;;\n   `myers`;;\n\tThe basic greedy diff algorithm. Currently, this is the default.\n   `minimal`;;\n\tSpend extra time to make sure the smallest possible diff is\n\tproduced.\n   `patience`;;\n\tUse \"patience diff\" algorithm when generating patches.\n   `histogram`;;\n\tThis algorithm extends the patience algorithm to \"support\n\tlow-occurrence common elements\".\n--\n+\nFor instance, if you configured the `diff.algorithm` variable to a\nnon-default value and want to use the default one, then you\nhave to use `--diff-algorithm=default` option.\n\n`--stat[=<width>[,<name-width>[,<count>]]]`::\n\tGenerate a diffstat. By default, as much space as necessary\n\twill be used for the filename part, and the rest for the graph\n\tpart. Maximum width defaults to terminal width, or 80 columns\n\tif not connected to a terminal, and can be overridden by\n\t_<width>_. The width of the filename part can be limited by\n\tgiving another width _<name-width>_ after a comma or by setting\n\t`diff.statNameWidth=<name-width>`. The width of the graph part can be\n\tlimited by using `--stat-graph-width=<graph-width>` or by setting\n\t`diff.statGraphWidth=<graph-width>`. Using `--stat` or\n\t`--stat-graph-width` affects all commands generating a stat graph,\n\twhile setting `diff.statNameWidth` or `diff.statGraphWidth`\n\tdoes not affect `git format-patch`.\n\tBy giving a third parameter _<count>_, you can limit the output to\n\tthe first _<count>_ lines, followed by `...` if there are more.\n+\nThese parameters can also be set individually with `--stat-width=<width>`,\n`--stat-name-width=<name-width>` and `--stat-count=<count>`.\n\n`--compact-summary`::\n\tOutput a condensed summary of extended header information such\n\tas file creations or deletions (\"new\" or \"gone\", optionally `+l`\n\tif it's a symlink) and mode changes (`+x` or `-x` for adding\n\tor removing executable bit respectively) in diffstat. The\n\tinformation is put between the filename part and the graph\n\tpart. Implies `--stat`.\n\n`--numstat`::\n\tSimilar to `--stat`, but shows number of added and\n\tdeleted lines in decimal notation and pathname without\n\tabbreviation, to make it more machine friendly.  For\n\tbinary files, outputs two `-` instead of saying\n\t`0 0`.\n\n`--shortstat`::\n\tOutput only the last line of the `--stat` format containing total\n\tnumber of modified files, as well as number of added and deleted\n\tlines.\n\n`-X [<param>,...]`::\n`--dirstat[=<param>,...]`::\n\tOutput the distribution of relative amount of changes for each\n\tsub-directory. The behavior of `--dirstat` can be customized by\n\tpassing it a comma separated list of parameters.\n\tThe defaults are controlled by the `diff.dirstat` configuration\n\tvariable (see linkgit:git-config[1]).\n\tThe following parameters are available:\n+\n--\n`changes`;;\n\tCompute the dirstat numbers by counting the lines that have been\n\tremoved from the source, or added to the destination. This ignores\n\tthe amount of pure code movements within a file.  In other words,\n\trearranging lines in a file is not counted as much as other changes.\n\tThis is the default behavior when no parameter is given.\n`lines`;;\n\tCompute the dirstat numbers by doing the regular line-based diff\n\tanalysis, and summing the removed/added line counts. (For binary\n\tfiles, count 64-byte chunks instead, since binary files have no\n\tnatural concept of lines). This is a more expensive `--dirstat`\n\tbehavior than the `changes` behavior, but it does count rearranged\n\tlines within a file as much as other changes. The resulting output\n\tis consistent with what you get from the other `--*stat` options.\n`files`;;\n\tCompute the dirstat numbers by counting the number of files changed.\n\tEach changed file counts equally in the dirstat analysis. This is\n\tthe computationally cheapest `--dirstat` behavior, since it does\n\tnot have to look at the file contents at all.\n`cumulative`;;\n\tCount changes in a child directory for the parent directory as well.\n\tNote that when using `cumulative`, the sum of the percentages\n\treported may exceed 100%. The default (non-cumulative) behavior can\n\tbe specified with the `noncumulative` parameter.\n_<limit>_;;\n\tAn integer parameter specifies a cut-off percent (3% by default).\n\tDirectories contributing less than this percentage of the changes\n\tare not shown in the output.\n--\n+\nExample: The following will count changed files, while ignoring\ndirectories with less than 10% of the total amount of changed files,\nand accumulating child directory counts in the parent directories:\n`--dirstat=files,10,cumulative`.\n\n`--cumulative`::\n\tSynonym for `--dirstat=cumulative`.\n\n`--dirstat-by-file[=<param>,...]`::\n\tSynonym for `--dirstat=files,<param>,...`.\n\n`--summary`::\n\tOutput a condensed summary of extended header information\n\tsuch as creations, renames and mode changes.\n\nifndef::git-format-patch[]\n`--patch-with-stat`::\n\tSynonym for `-p --stat`.\nendif::git-format-patch[]\n\nifndef::git-format-patch[]\n\n`-z`::\nifdef::git-log[]\n\tSeparate the commits with __NUL__s instead of newlines.\n+\nAlso, when `--raw` or `--numstat` has been given, do not munge\npathnames and use __NUL__s as output field terminators.\nendif::git-log[]\nifndef::git-log[]\n\tWhen `--raw`, `--numstat`, `--name-only` or `--name-status` has been\n\tgiven, do not munge pathnames and use NULs as output field terminators.\nendif::git-log[]\n+\nWithout this option, pathnames with \"unusual\" characters are quoted as\nexplained for the configuration variable `core.quotePath` (see\nlinkgit:git-config[1]).\n\n`--name-only`::\n\tShow only the name of each changed file in the post-image tree.\n\tThe file names are often encoded in UTF-8.\n\tFor more information see the discussion about encoding in the linkgit:git-log[1]\n\tmanual page.\n\n`--name-status`::\n\tShow only the name(s) and status of each changed file. See the description\n\tof the `--diff-filter` option on what the status letters mean.\n\tJust like `--name-only` the file names are often encoded in UTF-8.\n\n`--submodule[=<format>]`::\n\tSpecify how differences in submodules are shown.  When specifying\n\t`--submodule=short` the `short` format is used.  This format just\n\tshows the names of the commits at the beginning and end of the range.\n\tWhen `--submodule` or `--submodule=log` is specified, the `log`\n\tformat is used.  This format lists the commits in the range like\n\tlinkgit:git-submodule[1] `summary` does.  When `--submodule=diff`\n\tis specified, the `diff` format is used.  This format shows an\n\tinline diff of the changes in the submodule contents between the\n\tcommit range.  Defaults to `diff.submodule` or the `short` format\n\tif the config option is unset.\n\n`--color[=<when>]`::\n\tShow colored diff.\n\t`--color` (i.e. without `=<when>`) is the same as `--color=always`.\n\t_<when>_ can be one of `always`, `never`, or `auto`.\nifdef::git-diff[]\n\tIt can be changed by the `color.ui` and `color.diff`\n\tconfiguration settings.\nendif::git-diff[]\n\n`--no-color`::\n\tTurn off colored diff.\nifdef::git-diff[]\n\tThis can be used to override configuration settings.\nendif::git-diff[]\n\tIt is the same as `--color=never`.\n\n`--color-moved[=<mode>]`::\n\tMoved lines of code are colored differently.\nifdef::git-diff[]\n\tIt can be changed by the `diff.colorMoved` configuration setting.\nendif::git-diff[]\n\tThe _<mode>_ defaults to `no` if the option is not given\n\tand to `zebra` if the option with no mode is given.\n\tThe mode must be one of:\n+\n--\n`no`::\n\tMoved lines are not highlighted.\n`default`::\n\tIs a synonym for `zebra`. This may change to a more sensible mode\n\tin the future.\n`plain`::\n\tAny line that is added in one location and was removed\n\tin another location will be colored with `color.diff.newMoved`.\n\tSimilarly `color.diff.oldMoved` will be used for removed lines\n\tthat are added somewhere else in the diff. This mode picks up any\n\tmoved line, but it is not very useful in a review to determine\n\tif a block of code was moved without permutation.\n`blocks`::\n\tBlocks of moved text of at least 20 alphanumeric characters\n\tare detected greedily. The detected blocks are\n\tpainted using either the `color.diff.(old|new)Moved` color.\n\tAdjacent blocks cannot be told apart.\n`zebra`::\n\tBlocks of moved text are detected as in `blocks` mode. The blocks\n\tare painted using either the `color.diff.(old|new)Moved` color or\n\t`color.diff.(old|new)MovedAlternative`. The change between\n\tthe two colors indicates that a new block was detected.\n`dimmed-zebra`::\n\tSimilar to `zebra`, but additional dimming of uninteresting parts\n\tof moved code is performed. The bordering lines of two adjacent\n\tblocks are considered interesting, the rest is uninteresting.\n\t`dimmed_zebra` is a deprecated synonym.\n--\n\n`--no-color-moved`::\n\tTurn off move detection. This can be used to override configuration\n\tsettings. It is the same as `--color-moved=no`.\n\n`--color-moved-ws=<mode>,...`::\n\tThis configures how whitespace is ignored when performing the\n\tmove detection for `--color-moved`.\nifdef::git-diff[]\n\tIt can be set by the `diff.colorMovedWS` configuration setting.\nendif::git-diff[]\n\tThese modes can be given as a comma separated list:\n+\n--\n`no`::\n\tDo not ignore whitespace when performing move detection.\n`ignore-space-at-eol`::\n\tIgnore changes in whitespace at EOL.\n`ignore-space-change`::\n\tIgnore changes in amount of whitespace.  This ignores whitespace\n\tat line end, and considers all other sequences of one or\n\tmore whitespace characters to be equivalent.\n`ignore-all-space`::\n\tIgnore whitespace when comparing lines. This ignores differences\n\teven if one line has whitespace where the other line has none.\n`allow-indentation-change`::\n\tInitially ignore any whitespace in the move detection, then\n\tgroup the moved code blocks only into a block if the change in\n\twhitespace is the same per line. This is incompatible with the\n\tother modes.\n--\n\n`--no-color-moved-ws`::\n\tDo not ignore whitespace when performing move detection. This can be\n\tused to override configuration settings. It is the same as\n\t`--color-moved-ws=no`.\n\n`--word-diff[=<mode>]`::\n\tBy default, words are delimited by whitespace; see\n\t`--word-diff-regex` below.  The _<mode>_ defaults to `plain`, and\n\tmust be one of:\n+\n--\n`color`::\n\tHighlight changed words using only colors.  Implies `--color`.\n`plain`::\n\tShow words as ++[-removed-]++ and ++{+added+}++.  Makes no\n\tattempts to escape the delimiters if they appear in the input,\n\tso the output may be ambiguous.\n`porcelain`::\n\tUse a special line-based format intended for script\n\tconsumption.  Added/removed/unchanged runs are printed in the\n\tusual unified diff format, starting with a `+`/`-`/` `\n\tcharacter at the beginning of the line and extending to the\n\tend of the line.  Newlines in the input are represented by a\n\ttilde `~` on a line of its own.\n`none`::\n\tDisable word diff again.\n--\n+\nNote that despite the name of the first mode, color is used to\nhighlight the changed parts in all modes if enabled.\n\n`--word-diff-regex=<regex>`::\n\tUse _<regex>_ to decide what a word is, instead of considering\n\truns of non-whitespace to be a word.  Also implies\n\t`--word-diff` unless it was already enabled.\n+\nEvery non-overlapping match of the\n_<regex>_ is considered a word.  Anything between these matches is\nconsidered whitespace and ignored(!) for the purposes of finding\ndifferences.  You may want to append `|[^[:space:]]` to your regular\nexpression to make sure that it matches all non-whitespace characters.\nA match that contains a newline is silently truncated(!) at the\nnewline.\n+\nFor example, `--word-diff-regex=.` will treat each character as a word\nand, correspondingly, show differences character by character.\n+\nThe regex can also be set via a diff driver or configuration option, see\nlinkgit:gitattributes[5] or linkgit:git-config[1].  Giving it explicitly\noverrides any diff driver or configuration setting.  Diff drivers\noverride configuration settings.\n\n`--color-words[=<regex>]`::\n\tEquivalent to `--word-diff=color` plus (if a regex was\n\tspecified) `--word-diff-regex=<regex>`.\nendif::git-format-patch[]\n\n`--no-renames`::\n\tTurn off rename detection, even when the configuration\n\tfile gives the default to do so.\n\n`--[no-]rename-empty`::\n\tWhether to use empty blobs as rename source.\n\nifndef::git-format-patch[]\n`--check`::\n\tWarn if changes introduce conflict markers or whitespace errors.\n\tWhat are considered whitespace errors is controlled by `core.whitespace`\n\tconfiguration.  By default, trailing whitespaces (including\n\tlines that consist solely of whitespaces) and a space character\n\tthat is immediately followed by a tab character inside the\n\tinitial indent of the line are considered whitespace errors.\n\tExits with non-zero status if problems are found. Not compatible\n\twith `--exit-code`.\n\n`--ws-error-highlight=<kind>`::\n\tHighlight whitespace errors in the `context`, `old` or `new`\n\tlines of the diff.  Multiple values are separated by comma,\n\t`none` resets previous values, `default` reset the list to\n\t`new` and `all` is a shorthand for `old,new,context`.  When\n\tthis option is not given, and the configuration variable\n\t`diff.wsErrorHighlight` is not set, only whitespace errors in\n\t`new` lines are highlighted. The whitespace errors are colored\n\twith `color.diff.whitespace`.\n\nendif::git-format-patch[]\n\n`--full-index`::\n\tInstead of the first handful of characters, show the full\n\tpre- and post-image blob object names on the \"index\"\n\tline when generating patch format output.\n\n`--binary`::\n\tIn addition to `--full-index`, output a binary diff that\n\tcan be applied with `git-apply`.\nifndef::git-format-patch[]\n\tImplies `--patch`.\nendif::git-format-patch[]\n\n`--abbrev[=<n>]`::\n\tInstead of showing the full 40-byte hexadecimal object\n\tname in diff-raw format output and diff-tree header\n\tlines, show the shortest prefix that is at least _<n>_\n\thexdigits long that uniquely refers the object.\n\tIn diff-patch output format, `--full-index` takes higher\n\tprecedence, i.e. if `--full-index` is specified, full blob\n\tnames will be shown regardless of `--abbrev`.\n\tNon default number of digits can be specified with `--abbrev=<n>`.\n\n`-B[<n>][/<m>]`::\n`--break-rewrites[=[<n>][/<m>]]`::\n\tBreak complete rewrite changes into pairs of delete and\n\tcreate. This serves two purposes:\n+\nIt affects the way a change that amounts to a total rewrite of a file\nnot as a series of deletion and insertion mixed together with a very\nfew lines that happen to match textually as the context, but as a\nsingle deletion of everything old followed by a single insertion of\neverything new, and the number _<m>_ controls this aspect of the `-B`\noption (defaults to 60%). `-B/70%` specifies that less than 30% of the\noriginal should remain in the result for Git to consider it a total\nrewrite (i.e. otherwise the resulting patch will be a series of\ndeletion and insertion mixed together with context lines).\n+\nWhen used with `-M`, a totally-rewritten file is also considered as the\nsource of a rename (usually `-M` only considers a file that disappeared\nas the source of a rename), and the number _<n>_ controls this aspect of\nthe `-B` option (defaults to 50%). `-B20%` specifies that a change with\naddition and deletion compared to 20% or more of the file's size are\neligible for being picked up as a possible source of a rename to\nanother file.\n\n`-M[<n>]`::\n`--find-renames[=<n>]`::\nifndef::git-log[]\n\tDetect renames.\nendif::git-log[]\nifdef::git-log[]\n\tIf generating diffs, detect and report renames for each commit.\n\tFor following files across renames while traversing history, see\n\t`--follow`.\nendif::git-log[]\n\tIf _<n>_ is specified, it is a threshold on the similarity\n\tindex (i.e. amount of addition/deletions compared to the\n\tfile's size). For example, `-M90%` means Git should consider a\n\tdelete/add pair to be a rename if more than 90% of the file\n\thasn't changed.  Without a `%` sign, the number is to be read as\n\ta fraction, with a decimal point before it.  I.e., `-M5` becomes\n\t0.5, and is thus the same as `-M50%`.  Similarly, `-M05` is\n\tthe same as `-M5%`.  To limit detection to exact renames, use\n\t`-M100%`.  The default similarity index is 50%.\n\n`-C[<n>]`::\n`--find-copies[=<n>]`::\n\tDetect copies as well as renames.  See also `--find-copies-harder`.\n\tIf _<n>_ is specified, it has the same meaning as for `-M<n>`.\n\n`--find-copies-harder`::\n\tFor performance reasons, by default, `-C` option finds copies only\n\tif the original file of the copy was modified in the same\n\tchangeset.  This flag makes the command\n\tinspect unmodified files as candidates for the source of\n\tcopy.  This is a very expensive operation for large\n\tprojects, so use it with caution.  Giving more than one\n\t`-C` option has the same effect.\n\n`-D`::\n`--irreversible-delete`::\n\tOmit the preimage for deletes, i.e. print only the header but not\n\tthe diff between the preimage and `/dev/null`. The resulting patch\n\tis not meant to be applied with `patch` or `git apply`; this is\n\tsolely for people who want to just concentrate on reviewing the\n\ttext after the change. In addition, the output obviously lacks\n\tenough information to apply such a patch in reverse, even manually,\n\thence the name of the option.\n+\nWhen used together with `-B`, omit also the preimage in the deletion part\nof a delete/create pair.\n\n`-l<num>`::\n\tThe `-M` and `-C` options involve some preliminary steps that\n\tcan detect subsets of renames/copies cheaply, followed by an\n\texhaustive fallback portion that compares all remaining\n\tunpaired destinations to all relevant sources.  (For renames,\n\tonly remaining unpaired sources are relevant; for copies, all\n\toriginal sources are relevant.)  For N sources and\n\tdestinations, this exhaustive check is O(N^2).  This option\n\tprevents the exhaustive portion of rename/copy detection from\n\trunning if the number of source/destination files involved\n\texceeds the specified number.  Defaults to `diff.renameLimit`.\n\tNote that a value of 0 is treated as unlimited.\n\nifndef::git-format-patch[]\n`--diff-filter=[(A|C|D|M|R|T|U|X|B)...[*]]`::\n\tSelect only files that are Added (`A`), Copied (`C`),\n\tDeleted (`D`), Modified (`M`), Renamed (`R`), have their\n\ttype (i.e. regular file, symlink, submodule, ...) changed (`T`),\n\tare Unmerged (`U`), are\n\tUnknown (`X`), or have had their pairing Broken (`B`).\n\tAny combination of the filter characters (including none) can be used.\n\tWhen `*` (All-or-none) is added to the combination, all\n\tpaths are selected if there is any file that matches\n\tother criteria in the comparison; if there is no file\n\tthat matches other criteria, nothing is selected.\n+\nAlso, these upper-case letters can be downcased to exclude.  E.g.\n`--diff-filter=ad` excludes added and deleted paths.\n+\nNote that not all diffs can feature all types. For instance, copied and\nrenamed entries cannot appear if detection for those types is disabled.\n\n`-S<string>`::\n\tLook for differences that change the number of occurrences of\n\tthe specified _<string>_ (i.e. addition/deletion) in a file.\n\tIntended for the scripter's use.\n+\nIt is useful when you're looking for an exact block of code (like a\nstruct), and want to know the history of that block since it first\ncame into being: use the feature iteratively to feed the interesting\nblock in the preimage back into `-S`, and keep going until you get the\nvery first version of the block.\n+\nBinary files are searched as well.\n\n`-G<regex>`::\n\tLook for differences whose patch text contains added/removed\n\tlines that match _<regex>_.\n+\nTo illustrate the difference between `-S<regex>` `--pickaxe-regex` and\n`-G<regex>`, consider a commit with the following diff in the same\nfile:\n+\n----\n+    return frotz(nitfol, two->ptr, 1, 0);\n...\n-    hit = frotz(nitfol, mf2.ptr, 1, 0);\n----\n+\nWhile `git log -G\"frotz\\(nitfol\"` will show this commit, `git log\n-S\"frotz\\(nitfol\" --pickaxe-regex` will not (because the number of\noccurrences of that string did not change).\n+\nUnless `--text` is supplied patches of binary files without a textconv\nfilter will be ignored.\n+\nSee the 'pickaxe' entry in linkgit:gitdiffcore[7] for more\ninformation.\n\n`--find-object=<object-id>`::\n\tLook for differences that change the number of occurrences of\n\tthe specified object. Similar to `-S`, just the argument is different\n\tin that it doesn't search for a specific string but for a specific\n\tobject id.\n+\nThe object can be a blob or a submodule commit. It implies the `-t` option in\n`git-log` to also find trees.\n\n`--pickaxe-all`::\n\tWhen `-S` or `-G` finds a change, show all the changes in that\n\tchangeset, not just the files that contain the change\n\tin _<string>_.\n\n`--pickaxe-regex`::\n\tTreat the _<string>_ given to `-S` as an extended POSIX regular\n\texpression to match.\n\nendif::git-format-patch[]\n\n`-O<orderfile>`::\n\tControl the order in which files appear in the output.\n\tThis overrides the `diff.orderFile` configuration variable\n\t(see linkgit:git-config[1]).  To cancel `diff.orderFile`,\n\tuse `-O/dev/null`.\n+\nThe output order is determined by the order of glob patterns in\n_<orderfile>_.\nAll files with pathnames that match the first pattern are output\nfirst, all files with pathnames that match the second pattern (but not\nthe first) are output next, and so on.\nAll files with pathnames that do not match any pattern are output\nlast, as if there was an implicit match-all pattern at the end of the\nfile.\nIf multiple pathnames have the same rank (they match the same pattern\nbut no earlier patterns), their output order relative to each other is\nthe normal order.\n+\n_<orderfile>_ is parsed as follows:\n+\n--\n - Blank lines are ignored, so they can be used as separators for\n   readability.\n\n - Lines starting with a hash (\"`#`\") are ignored, so they can be used\n   for comments.  Add a backslash (\"`\\`\") to the beginning of the\n   pattern if it starts with a hash.\n\n - Each other line contains a single pattern.\n--\n+\nPatterns have the same syntax and semantics as patterns used for\n`fnmatch`(3) without the `FNM_PATHNAME` flag, except a pathname also\nmatches a pattern if removing any number of the final pathname\ncomponents matches the pattern.  For example, the pattern \"`foo*bar`\"\nmatches \"`fooasdfbar`\" and \"`foo/bar/baz/asdf`\" but not \"`foobarx`\".\n\n`--skip-to=<file>`::\n`--rotate-to=<file>`::\n\tDiscard the files before the named _<file>_ from the output\n\t(i.e. 'skip to'), or move them to the end of the output\n\t(i.e. 'rotate to').  These options were invented primarily for the use\n\tof the `git difftool` command, and may not be very useful\n\totherwise.\n\nifndef::git-format-patch[]\n`-R`::\n\tSwap two inputs; that is, show differences from index or\n\ton-disk file to tree contents.\nendif::git-format-patch[]\n\n`--relative[=<path>]`::\n`--no-relative`::\n\tWhen run from a subdirectory of the project, it can be\n\ttold to exclude changes outside the directory and show\n\tpathnames relative to it with this option.  When you are\n\tnot in a subdirectory (e.g. in a bare repository), you\n\tcan name which subdirectory to make the output relative\n\tto by giving a _<path>_ as an argument.\n\t`--no-relative` can be used to countermand both `diff.relative` config\n\toption and previous `--relative`.\n\n`-a`::\n`--text`::\n\tTreat all files as text.\n\n`--ignore-cr-at-eol`::\n\tIgnore carriage-return at the end of line when doing a comparison.\n\n`--ignore-space-at-eol`::\n\tIgnore changes in whitespace at EOL.\n\n`-b`::\n`--ignore-space-change`::\n\tIgnore changes in amount of whitespace.  This ignores whitespace\n\tat line end, and considers all other sequences of one or\n\tmore whitespace characters to be equivalent.\n\n`-w`::\n`--ignore-all-space`::\n\tIgnore whitespace when comparing lines.  This ignores\n\tdifferences even if one line has whitespace where the other\n\tline has none.\n\n`--ignore-blank-lines`::\n\tIgnore changes whose lines are all blank.\n\n\n`-I<regex>`::\n`--ignore-matching-lines=<regex>`::\n\tIgnore changes whose all lines match _<regex>_.  This option may\n\tbe specified more than once.\n\n`--inter-hunk-context=<number>`::\n\tShow the context between diff hunks, up to the specified _<number>_\n\tof lines, thereby fusing hunks that are close to each other.\n\tDefaults to `diff.interHunkContext` or 0 if the config option\n\tis unset.\n\n`-W`::\n`--function-context`::\n\tShow whole function as context lines for each change.\n\tThe function names are determined in the same way as\n\t`git diff` works out patch hunk headers (see \"Defining a\n\tcustom hunk-header\" in linkgit:gitattributes[5]).\n\nifndef::git-format-patch[]\nifndef::git-log[]\n`--exit-code`::\n\tMake the program exit with codes similar to `diff`(1).\n\tThat is, it exits with 1 if there were differences and\n\t0 means no differences.\n\n`--quiet`::\n\tDisable all output of the program. Implies `--exit-code`.\n\tDisables execution of external diff helpers whose exit code\n\tis not trusted, i.e. their respective configuration option\n\t`diff.trustExitCode` or ++diff.++__<driver>__++.trustExitCode++ or\n\tenvironment variable `GIT_EXTERNAL_DIFF_TRUST_EXIT_CODE` is\n\tfalse.\nendif::git-log[]\nendif::git-format-patch[]\n\n`--ext-diff`::\n\tAllow an external diff helper to be executed. If you set an\n\texternal diff driver with linkgit:gitattributes[5], you need\n\tto use this option with linkgit:git-log[1] and friends.\n\n`--no-ext-diff`::\n\tDisallow external diff drivers.\n\n`--textconv`::\n`--no-textconv`::\n\tAllow (or disallow) external text conversion filters to be run\n\twhen comparing binary files. See linkgit:gitattributes[5] for\n\tdetails. Because textconv filters are typically a one-way\n\tconversion, the resulting diff is suitable for human\n\tconsumption, but cannot be applied. For this reason, textconv\n\tfilters are enabled by default only for linkgit:git-diff[1] and\n\tlinkgit:git-log[1], but not for linkgit:git-format-patch[1] or\n\tdiff plumbing commands.\n\n\n`--ignore-submodules[=(none|untracked|dirty|all)]`::\n\tIgnore changes to submodules in the diff generation. `all` is the default.\n\tUsing `none` will consider the submodule modified when it either contains\n\tuntracked or modified files or its `HEAD` differs from the commit recorded\n\tin the superproject and can be used to override any settings of the\n\t`ignore` option in linkgit:git-config[1] or linkgit:gitmodules[5]. When\n\t`untracked` is used submodules are not considered dirty when they only\n\tcontain untracked content (but they are still scanned for modified\n\tcontent). Using `dirty` ignores all changes to the work tree of submodules,\n\tonly changes to the commits stored in the superproject are shown (this was\n\tthe behavior until 1.7.0). Using `all` hides all changes to submodules.\n\n`--src-prefix=<prefix>`::\n\tShow the given source _<prefix>_ instead of \"a/\".\n\n`--dst-prefix=<prefix>`::\n\tShow the given destination _<prefix>_ instead of \"b/\".\n\n`--no-prefix`::\n\tDo not show any source or destination prefix.\n\n`--default-prefix`::\n\tUse the default source and destination prefixes (\"a/\" and \"b/\").\n\tThis overrides configuration variables such as `diff.noprefix`,\n\t`diff.srcPrefix`, `diff.dstPrefix`, and `diff.mnemonicPrefix`\n\t(see linkgit:git-config[1]).\n\n`--line-prefix=<prefix>`::\n\tPrepend an additional _<prefix>_ to every line of output.\n\n`--ita-invisible-in-index`::\n\tBy default entries added by `git add -N` appear as an existing\n\tempty file in `git diff` and a new file in `git diff --cached`.\n\tThis option makes the entry appear as a new file in `git diff`\n\tand non-existent in `git diff --cached`. This option could be\n\treverted with `--ita-visible-in-index`. Both options are\n\texperimental and could be removed in future.\n\nFor more detailed explanation on these common options, see also\nlinkgit:gitdiffcore[7].\n\n```\n\n**ref/libxdiff/man/xdiff.txt**\n```\nLibXDiff(3)                File Differential Library               LibXDiff(3)\n\n\n\nNAME\n       xdl_set_allocator, xdl_malloc, xdl_free, xdl_realloc, xdl_init_mmfile,\n       xdl_free_mmfile, xdl_mmfile_iscompact, xdl_seek_mmfile,\n       xdl_read_mmfile, xdl_write_mmfile, xdl_writem_mmfile,\n       xdl_mmfile_writeallocate, xdl_mmfile_ptradd, xdl_mmfile_first,\n       xdl_mmfile_next, xdl_mmfile_size, xdl_mmfile_cmp, xdl_mmfile_compact,\n       xdl_diff, xdl_patch, xdl_merge3, xdl_bdiff_mb, xdl_bdiff, xdl_rabd-\n       iff_mb, xdl_rabdiff, xdl_bdiff_tgsize, xdl_bpatch - File Differential\n       Library support functions\n\n\nSYNOPSIS\n       #include <xdiff.h>\n\n       int xdl_set_allocator(memallocator_t const *malt);\n       void *xdl_malloc(unsigned int size);\n       void xdl_free(void *ptr);\n       void *xdl_realloc(void *ptr, unsigned int nsize);\n       int xdl_init_mmfile(mmfile_t *mmf, long bsize, unsigned long flags);\n       void xdl_free_mmfile(mmfile_t *mmf);\n       int xdl_mmfile_iscompact(mmfile_t *mmf);\n       int xdl_seek_mmfile(mmfile_t *mmf, long off);\n       long xdl_read_mmfile(mmfile_t *mmf, void *data, long size);\n       long xdl_write_mmfile(mmfile_t *mmf, void const *data, long size);\n       long xdl_writem_mmfile(mmfile_t *mmf, mmbuffer_t *mb, int nbuf);\n       void *xdl_mmfile_writeallocate(mmfile_t *mmf, long size);\n       long xdl_mmfile_ptradd(mmfile_t *mmf, char *ptr, long size, unsigned long flags);\n       void *xdl_mmfile_first(mmfile_t *mmf, long *size);\n       void *xdl_mmfile_next(mmfile_t *mmf, long *size);\n       long xdl_mmfile_size(mmfile_t *mmf);\n       int xdl_mmfile_cmp(mmfile_t *mmf1, mmfile_t *mmf2);\n       int xdl_mmfile_compact(mmfile_t *mmfo, mmfile_t *mmfc, long bsize, unsigned long flags);\n       int xdl_diff(mmfile_t *mmf1, mmfile_t *mmf2, xpparam_t const *xpp, xdemitconf_t const *xecfg, xdemitcb_t *ecb);\n       int xdl_patch(mmfile_t *mmf, mmfile_t *mmfp, int mode, xdemitcb_t *ecb, xdemitcb_t *rjecb);\n       int xdl_merge3(mmfile_t *mmfo, mmfile_t *mmf1, mmfile_t *mmf2, xdemitcb_t *ecb, xdemitcb_t *rjecb);\n       int xdl_bdiff_mb(mmbuffer_t *mmb1, mmbuffer_t *mmb2, bdiffparam_t const *bdp, xdemitcb_t *ecb);\n       int xdl_bdiff(mmfile_t *mmf1, mmfile_t *mmf2, bdiffparam_t const *bdp, xdemitcb_t *ecb);\n       int xdl_rabdiff_mb(mmbuffer_t *mmb1, mmbuffer_t *mmb2, xdemitcb_t *ecb);\n       int xdl_rabdiff(mmfile_t *mmf1, mmfile_t *mmf2, xdemitcb_t *ecb);\n       long xdl_bdiff_tgsize(mmfile_t *mmfp);\n       int xdl_bpatch(mmfile_t *mmf, mmfile_t *mmfp, xdemitcb_t *ecb);\n\n\nDESCRIPTION\n       The LibXDiff library implements basic and yet complete functionalities\n       to create file differences/patches to both binary and text files. The\n       library uses memory files as file abstraction to achieve both perfor-\n       mance and portability. For binary files, LibXDiff implements both (with\n       some modification) the algorithm described in File System Support for\n       Delta Compression by Joshua P. MacDonald, and the method described in\n       Fingerprinting by Random Polynomials by Michael O. Rabin.  While for\n       text files it follows directives described in An O(ND) Difference Algo-\n       rithm and Its Variations by Eugene W. Myers.  Memory files used by the\n       library are basically a collection of buffers that store the file con-\n       tent. There are two different requirements for memory files when passed\n       to diff/patch functions. Text files for diff/patch functions require\n       that a single line do not have to spawn across two different memory\n       file blocks. Binary diff/patch functions require memory files to be\n       compact.  A compact memory files is a file whose content is stored\n       inside a single block.  Functionalities inside the library are avail-\n       able to satisfy these rules.  Using the XDL_MMF_ATOMIC memory file flag\n       it is possible to make writes to not split the written record across\n       different blocks, while the functions xdl_mmfile_iscompact() ,\n       xdl_mmfile_compact() and xdl_mmfile_writeallocate() are usefull to test\n       if the file is compact and to create a compacted version of the file\n       itself. The text file differential output uses the raw unified output\n       format, by omitting the file header since the result is always relative\n       to a single compare operation (between two files). The output format of\n       the binary patch file is proprietary (and binary) and it is basically a\n       collection of copy and insert commands, like described inside the Mac-\n       Donald paper.\n\n\n\n   Functions\n       The following functions are defined:\n\n       int xdl_set_allocator(memallocator_t const *malt);\n\n              The LibXDiff library enable the user to set its own memory allo-\n              cator, that will be used for all the following memory requests.\n              The allocator must be set before to start calling the LibXDiff\n              library with a call to xdl_set_allocator().  The memory alloca-\n              tor structure contains the following members:\n\n                   typedef struct s_memallocator {\n                        void *priv;\n                        void *(*malloc)(void *priv, unsigned int size);\n                        void (*free)(void *priv, void *ptr);\n                        void *(*realloc)(void *priv, void *ptr, unsigned int nsize);\n                   } memallocator_t;\n\n              The malloc() function pointer will be used by LibXDiff to\n              request a memory block of size bytes. The free() function\n              pointer will be called to free a previously allocated block ptr\n              , while the realloc() will be used to resize the ptr to a new\n              nsize size in bytes. The priv structure member will be passed to\n              the malloc(),free(),realloc() functions as first parameter. The\n              LibXDiff user must call xdl_set_allocator() before starting\n              using the library, otherwise LibXDiff functions will fail due to\n              the lack of memory allocation support.  A typical initialization\n              sequence for POSIX systems will use the standard malloc(3),\n              free(3), realloc(3) and will look like:\n\n                   void *wrap_malloc(void *priv, unsigned int size) {\n                        return malloc(size);\n                   }\n\n                   void wrap_free(void *priv, void *ptr) {\n                        free(ptr);\n                   }\n\n                   void *wrap_realloc(void *priv, void *ptr, unsigned int size) {\n                        return realloc(ptr, size);\n                   }\n\n                   void my_init_xdiff(void) {\n                        memallocator_t malt;\n\n                        malt.priv = NULL;\n                        malt.malloc = wrap_malloc;\n                        malt.free = wrap_free;\n                        malt.realloc = wrap_realloc;\n                        xdl_set_allocator(&malt);\n                   }\n\n\n\n       void *xdl_malloc(unsigned int size);\n\n              Allocates a memory block of size bytes using the LibXDiff memory\n              allocator. The user can specify its own allocator using the\n              xdl_set_allocator() function. The xdl_malloc() return a pointer\n              to the newly allocated block, or NULL in case of failure.\n\n\n       void xdl_free(void *ptr);\n\n              Free a previously allocated memory block pointed by ptr.  The\n              ptr block must has been allocated using either xdl_malloc() or\n              xdl_realloc().\n\n\n       void *xdl_realloc(void *ptr, unsigned int nsize);\n\n              Resizes the memory block pointed by ptr to a new size nsize.\n              Return the resized block if successful, or NULL in case the\n              reallocation fails. After a successful reallocation, the old ptr\n              block is to be considered no more valid.\n\n\n       int xdl_init_mmfile(mmfile_t *mmf, long bsize, unsigned long flags);\n\n              Initialize the memory file mmf by requiring an internal block\n              size of bsize.  The flags parameter is a combination of the fol-\n              lowing flags :\n\n              XDL_MMF_ATOMIC Writes on the memory file will be atomic. That\n              is, the data will not be split on two or more different blocks.\n\n              Once an xdl_init_mmfile() succeeded, a matching\n              xdl_free_mmfile() must be called when the user has done using\n              the memory file, otherwise serious memory leaks will happen.\n              The function return 0 if succeed or -1 if an error is encoun-\n              tered.\n\n\n       void xdl_free_mmfile(mmfile_t *mmf);\n\n              Free all the data associated with the mmf memory file.\n\n\n       int xdl_mmfile_iscompact(mmfile_t *mmf);\n\n              Returns an integer different from 0 if the mmf memory file is\n              compact, 0 otherwise. A compact memory file is one that have the\n              whole content stored inside a single block.\n\n\n       int xdl_seek_mmfile(mmfile_t *mmf, long off);\n\n              Set the current data pointer of the memory file mmf to the spec-\n              ified offset off from the beginning of the file itself. Returns\n              0 if successful or -1 if an error happened.\n\n\n       long xdl_read_mmfile(mmfile_t *mmf, void *data, long size);\n\n              Request to read size bytes from the memory file mmf by storing\n              the data inside the data buffer. Returns the number of bytes\n              read into the data buffer. The amount of data read can be lower\n              than the specified size.  The function returns -1 if an error\n              happened.\n\n\n       long xdl_write_mmfile(mmfile_t *mmf, void const *data, long size);\n\n              Request to write size bytes from the specified buffer data into\n              the memory file mmf.  If the memory file has been created using\n              the XDL_MMF_ATOMIC flag, the write request will not be split\n              across different blocks.  Note that all write operations done on\n              memory files do append data at the end the file, and writes in\n              the middle of it are allowed. This is because the library memory\n              file abstraction does not need this functionality to be avail-\n              able.  The function returns the number of bytes written or a\n              number lower than size if an error happened.\n\n\n       long xdl_writem_mmfile(mmfile_t *mmf, mmbuffer_t *mb, int nbuf);\n\n              Request to sequentially write nbuf memory buffers passed inside\n              the array mb into the memory file mmf.  The memory buffer struc-\n              ture is defined as :\n\n                   typedef struct s_mmbuffer {\n                        char *ptr;\n                        long size;\n                   } mmbuffer_t;\n\n              The ptr field is a pointer to the user data, whose size is spec-\n              ified inside the size structure field. The function returns the\n              total number of bytes written or a lower number if an error hap-\n              pened.\n\n\n       void *xdl_mmfile_writeallocate(mmfile_t *mmf, long size);\n\n              The function request to allocate a write buffer of size bytes in\n              the mmf memory file and returns the pointer to the allocated\n              buffer. The user will have the responsibility to store size\n              bytes (no more, no less) inside the memory region pointed to by\n              the returned pointer.  The files size will grow of size bytes as\n              a consequence of this operation. The function will return NULL\n              if an error happened.\n\n\n       long xdl_mmfile_ptradd(mmfile_t *mmf, char *ptr, long size, unsigned\n       long flags);\n\n              The function adds a user specified block to the end of the mem-\n              ory file mmf.  The block first byte is pointed to by ptr and its\n              length is size bytes. The flags parameter can be used to specify\n              attributes of the user memory block. Currently supported\n              attributes are:\n\n              XDL_MMB_READONLY Specify that the added memory block must be\n              treated as read-only, and every attempt to write on it should\n              result in a failure of the memory file writing functions.\n\n              The purpose of this function is basically to avoid copying mem-\n              ory around, by helping the library to not drain the CPU cache.\n              The function returns size in case of success, or -1 in case of\n              error.\n\n\n       void *xdl_mmfile_first(mmfile_t *mmf, long *size);\n\n              The function is used to return the first block of the mmf memory\n              file block chain. The size parameter will receive the size of\n              the block, while the function will return the pointer the the\n              first byte of the block itself. The function returns NULL if the\n              file is empty.\n\n\n       void *xdl_mmfile_next(mmfile_t *mmf, long *size);\n\n              The function is used to return the next block of the mmf memory\n              file block chain. The size parameter will receive the size of\n              the block, while the function will return the pointer the the\n              first byte of the block itself. The function returns NULL if the\n              current block is the last one of the chain.\n\n\n       long xdl_mmfile_size(mmfile_t *mmf);\n\n              The function returns the size of the specified memory file mmf.\n\n\n       int xdl_mmfile_cmp(mmfile_t *mmf1, mmfile_t *mmf2);\n\n              Request to compare two memory files mmf1 and mmf2 and returns 0\n              if files are identical, or a value different from 0 if files are\n              different.\n\n\n       int xdl_mmfile_compact(mmfile_t *mmfo, mmfile_t *mmfc, long bsize,\n       unsigned long flags);\n\n              Request to create a compact version of the memory file mmfo into\n              the (uninitialized) memory file mmfc.  The bsize parameter spec-\n              ify the requested block size and flags specify flags to be used\n              to create the new mmfc memory file (see xdl_init_mmfile() ). The\n              function returns 0 if succedded or -1 if an error happened.\n\n\n       int xdl_diff(mmfile_t *mmf1, mmfile_t *mmf2, xpparam_t const *xpp,\n       xdemitconf_t const *xecfg, xdemitcb_t *ecb);\n\n              Request to create the difference between the two text memory\n              files mmf1 and mmf2.  The mmf1 memory files is considered the\n              \"old\" file while mmf2 is considered the \"new\" file. So the func-\n              tion will create a patch file that once applied to mmf1 will\n              give mmf2 as result. Files mmf1 and mmf2 must be atomic from a\n              line point of view (or, as an extreme, compact), that means that\n              a single test line cannot spread among different memory file\n              blocks.  The xpp parameter is a pointer to a structure :\n\n                   typedef struct s_xpparam {\n                        unsigned long flags;\n                   } xpparam_t;\n\n              that is used to specify parameters to be used by the file dif-\n              ferential algorithm.  The flags field is a combination of the\n              following flags :\n\n\n              XDF_NEED_MINIMAL Requires the minimal edit script to be found by\n              the algorithm (may be slow).\n\n              The xecfg parameter point to a structure :\n\n                   typedef struct s_xdemitconf {\n                        long ctxlen;\n                   } xdemitconf_t;\n\n              that is used to configure the algorithm responsible of the\n              creation the the differential file from an edit script. The\n              ctxlen field is used to specify the amount of context to be\n              emitted inside the differential file (the value 3 is suggested\n              for normal operations).  The parameter ecb is a pointer to a\n              structure :\n\n                   typedef struct s_xdemitcb {\n                        void *priv;\n                        int (*outf)(void *, mmbuffer_t *, int);\n                   } xdemitcb_t;\n\n              that is used by the differential file creation algorithm to emit\n              the created data. The priv field is an opaque pointer to a user\n              specified data, while the outf field point to a callback func-\n              tion that is called internally to emit algorithm generated data\n              rappresenting the differential file. The first parameter of the\n              callback is the same priv field specified inside the xdemitcb_t\n              structure. The second parameter point to an array of mmbuffer_t\n              (see above for a definition of the structure) whose element\n              count is specified inside the last parameter of the callback\n              itself. The callback will always be called with entire records\n              (lines) and never a record (line) will be emitted using two dif-\n              ferent callback calls. This is important because if the called\n              will use another memory file to store the result, by creating\n              the target memory file with XDL_MMF_ATOMIC will guarantee the\n              \"atomicity\" of the memory file itself.  The function returns 0\n              if succeeded or -1 if an error occurred.\n\n\n       int xdl_patch(mmfile_t *mmf, mmfile_t *mmfp, int mode, xdemitcb_t *ecb,\n       xdemitcb_t *rjecb);\n\n              Request to patch the memory file mmf using the patch file stored\n              in mmfp.  The mmf memory file is not changed during the opera-\n              tion and can be considered as read only.  The mode parameter can\n              be one of the following values :\n\n              XDL_PATCH_NORMAL Perform standard patching like if the patch\n              memory file mmfp has been created using mmf as \"old\" file.\n\n              XDL_PATCH_REVERSE Apply the reverse patch. That means that the\n              mmf memory file has to be considered as if it was specified as\n              \"new\" file during the differential operation ( xdl_diff() ). The\n              result of the operation will then be the file content that was\n              used as \"old\" file during the differential operation.\n\n              The following flags can be specified (by or-ing them) to one of\n              the above:\n\n              XDL_PATCH_IGNOREBSPACE Ignore the whitespace at the beginning\n              and the end of the line.\n\n              The ecb will be used by the patch algorithm to create the result\n              file while the rjecb will be used to emit all differential\n              chunks that cannot be applied.  Like explained above, callbacks\n              are always called with entire records to guarantee atomicity of\n              the resulting output.  The function returns 0 if succeeded with-\n              out performing any fuzzy hunk detection, a positive value if it\n              secceeded with fuzzy hunk detection or -1 if an error occurred\n              during the patch operation.\n\n\n       int xdl_merge3(mmfile_t *mmfo, mmfile_t *mmf1, mmfile_t *mmf2,\n       xdemitcb_t *ecb, xdemitcb_t *rjecb);\n\n              Merges three files together. The mmfo file is the original one,\n              while mmf1 and mmf2 are two modified versions of mmfo.  The\n              function works by creating a differential between mmfo and mmf2\n              and by applying the resulting patch to mmf1.  Because of this\n              sequence, mmf1 changes will be privileged against the ones of\n              mmf2.  The ecb will be used by the patch algorithm to create the\n              result file while the rjecb will be used to emit all differen-\n              tial chunks that cannot be applied.  Like explained above, call-\n              backs are always called with entire records to guarantee atomic-\n              ity of the resulting output.  The function returns 0 if suc-\n              ceeded or -1 if an error occurred during the patch operation.\n\n\n       int xdl_bdiff(mmfile_t *mmf1, mmfile_t *mmf2, bdiffparam_t const *bdp,\n       xdemitcb_t *ecb);\n\n              Request to create the difference between the two text memory\n              files mmf1 and mmf2.  The mmf1 memory files is considered the\n              \"old\" file while mmf2 is considered the \"new\" file. So the func-\n              tion will create a patch file that once applied to mmf1 will\n              give mmf2 as result. Files mmf1 and mmf2 must be compact to make\n              it easy and faster to perform the difference operation.  Func-\n              tions are available to check for compactness ( xdl_mmfile_iscom-\n              pact() ) and to make compact a non-compact file (\n              xdl_mmfile_compact() ). An example of how to create a compact\n              memory file (described inside the test subdirectory) is :\n\n                   int xdlt_load_mmfile(char const *fname, mmfile_t *mf, int binmode) {\n                        char cc;\n                        int fd;\n                        long size, bsize;\n                        char *blk;\n\n                        if (xdl_init_mmfile(mf, XDLT_STD_BLKSIZE, XDL_MMF_ATOMIC) < 0)\n                             return -1;\n                        if ((fd = open(fname, O_RDONLY)) == -1) {\n                             perror(fname);\n                             xdl_free_mmfile(mf);\n                             return -1;\n                        }\n                        if ((size = bsize = lseek(fd, 0, SEEK_END)) > 0 && !binmode) {\n                             if (lseek(fd, -1, SEEK_END) != (off_t) -1 &&\n                                 read(fd, &cc, 1) && cc != '\\n')\n                                  bsize++;\n                        }\n                        lseek(fd, 0, SEEK_SET);\n                        if (!(blk = (char *) xdl_mmfile_writeallocate(mf, bsize))) {\n                             xdl_free_mmfile(mf);\n                             close(fd);\n                             return -1;\n                        }\n                        if (read(fd, blk, (size_t) size) != (size_t) size) {\n                             perror(fname);\n                             xdl_free_mmfile(mf);\n                             close(fd);\n                             return -1;\n                        }\n                        close(fd);\n                        if (bsize > size)\n                             blk[size] = '\\n';\n                        return 0;\n                   }\n\n              The bdp parameter points to a structure :\n\n                   typedef struct s_bdiffparam {\n                        long bsize;\n                   } bdiffparam_t;\n\n              that is used to pass information to the binary file differential\n              algorithm.  The bsize parameter specify the size of the block\n              that will be used to decompose mmf1 during the block classifica-\n              tion phase of the algorithm (see MacDonald paper).  Suggested\n              values go from 16 to 64, with a preferred power of two charac-\n              teristic.  The ecb parameter is used to pass the emission call-\n              back to the algorithm responsible of the output file creation.\n              The function returns 0 if succeede or -1 if an error is\n              occurred.\n\n\n       int xdl_bdiff_mb(mmbuffer_t *mmb1, mmbuffer_t *mmb2, bdiffparam_t const\n       *bdp, xdemitcb_t *ecb);\n\n              Same as xdl_bdiff() but it works on memory buffer directly. The\n              xdl_bdiff() is implemented internally with a xdl_bdiff_mb()\n              after having setup the two memory buffers from the passed memory\n              files (that must be compact, as described above). The memory\n              buffer structure is defined as :\n\n                   typedef struct s_mmbuffer {\n                        char *ptr;\n                        long size;\n                   } mmbuffer_t;\n\n              An empty memory buffer is specified by setting the ptr member as\n              NULL and the size member as zero. The reason of having this\n              function is to avoid the memory file preparation, that might\n              involve copying memory from other sources. Using the\n              xdl_bdiff_mb(), the caller can setup the two memory buffer by\n              using, for example, mmap(2), and hence avoiding unnecessary mem-\n              ory copies. The other parameters and the return value of the\n              function xdl_bdiff_mb() are the same as the ones already\n              described in xdl_bdiff().\n\n\n       int xdl_rabdiff(mmfile_t *mmf1, mmfile_t *mmf2, xdemitcb_t *ecb);\n\n              Request to create the difference between the two text memory\n              files mmf1 and mmf2 using the Rabin's polynomial fingerprinting\n              algorithm. This algorithm typically performs faster and produces\n              smaller deltas, when compared to the XDelta-like one.  The mmf1\n              memory files is considered the \"old\" file while mmf2 is consid-\n              ered the \"new\" file. So the function will create a patch file\n              that once applied to mmf1 will give mmf2 as result. Files mmf1\n              and mmf2 must be compact to make it easy and faster to perform\n              the difference operation.  Functions are available to check for\n              compactness ( xdl_mmfile_iscompact() ) and to make compact a\n              non-compact file ( xdl_mmfile_compact() ). The ecb parameter is\n              used to pass the emission callback to the algorithm responsible\n              of the output file creation.  The function returns 0 if succeede\n              or -1 if an error is occurred.\n\n\n       int xdl_rabdiff_mb(mmbuffer_t *mmb1, mmbuffer_t *mmb2, xdemitcb_t\n       *ecb);\n\n              Same as xdl_rabdiff() but it works on memory buffer directly.\n              The memory buffer structure is defined as :\n\n                   typedef struct s_mmbuffer {\n                        char *ptr;\n                        long size;\n                   } mmbuffer_t;\n\n              An empty memory buffer is specified by setting the ptr member as\n              NULL and the size member as zero. The reason of having this\n              function is to avoid the memory file preparation, that might\n              involve copying memory from other sources. Using the xdl_rabd-\n              iff_mb(), the caller can setup the two memory buffer by using,\n              for example, mmap(2), and hence avoiding unnecessary memory\n              copies. The other parameters and the return value of the func-\n              tion xdl_rabdiff_mb() are the same as the ones already described\n              in xdl_rabdiff().\n\n\n       long xdl_bdiff_tgsize(mmfile_t *mmfp);\n\n              Given a binary memory file patch, it returns the size that the\n              result file will have once the patch is applied to the target\n              file. It can be used to pre-allocate (or write-allocate) a mem-\n              ory block to store the patch result so that a compact file will\n              be available at the end of the operation. The function returns\n              the requested size, or -1 if an error occurred during the opera-\n              tion.\n\n\n       int xdl_bpatch(mmfile_t *mmf, mmfile_t *mmfp, xdemitcb_t *ecb);\n\n              Request to patch the binary memory file mmf using the binary\n              patch file stored in mmfp.  The mmf memory file is not changed\n              during the operation and can be considered as read only. The\n              binary patch algorithm has no notion of context, so the patch\n              operation cannot be partial (either success or failure). The ecb\n              parameter contain the callabck (see above for description) used\n              by the binary patch algorithm to emit the result file. The func-\n              tion returns 0 if succeeded or -1 if an error occurred during\n              the patch operation.\n\n\nSEE ALSO\n       Two papers drove the content of this library and these are :\n\n       o      File System Support for Delta Compression by Joshua P. MacDonald\n              http://www.xmailserver.org/xdfs.pdf\n\n       o      Fingerprinting by Random Polynomials by Michael O. Rabin\n              http://www.xmailserver.org/rabin.pdf\n\n       o      An O(ND) Difference Algorithm and Its Variations by Eugene W.\n              Myers http://www.xmailserver.org/diff2.pdf\n\n\n       Also usefull information can be looked up inside the diffutil GNU pack-\n       age :\n\n       http://www.gnu.org/software/diffutils/diffutils.html\n\n\nLICENSE\n       This library is free software; you can redistribute it and/or modify it\n       under the terms of the GNU Lesser General Public License as published\n       by the Free Software Foundation; either version 2.1 of the License, or\n       (at your option) any later version.  A copy of the license is available\n       at :\n\n       http://www.gnu.org/copyleft/lesser.html\n\n\nAUTHOR\n       Developed by Davide Libenzi <davidel@xmailserver.org>\n\n\nAVAILABILITY\n       The latest version of LibXDiff can be found at :\n\n       http://www.xmailserver.org/xdiff-lib.html\n\n\nBUGS\n       There are no known bugs.  Bug reports and comments to Davide Libenzi\n       <davidel@xmailserver.org>\n\n\n\n\nGNU                                  0.23                          LibXDiff(3)\n\n```<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n\n","ts":1.738873036456E9}
